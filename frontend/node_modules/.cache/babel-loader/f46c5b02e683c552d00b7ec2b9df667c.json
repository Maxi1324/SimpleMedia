{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __decorate, __extends } from \"tslib\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport { AbstractPureComponent2 } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n\nvar ResizeSensor =\n/** @class */\nfunction (_super) {\n  __extends(ResizeSensor, _super);\n\n  function ResizeSensor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.element = null;\n    _this.observer = new ResizeObserver(function (entries) {\n      var _a, _b;\n\n      return (_b = (_a = _this.props).onResize) === null || _b === void 0 ? void 0 : _b.call(_a, entries);\n    });\n    return _this;\n  }\n\n  ResizeSensor.prototype.render = function () {\n    // pass-through render of single child\n    return React.Children.only(this.props.children);\n  };\n\n  ResizeSensor.prototype.componentDidMount = function () {\n    this.observeElement();\n  };\n\n  ResizeSensor.prototype.componentDidUpdate = function (prevProps) {\n    this.observeElement(this.props.observeParents !== prevProps.observeParents);\n  };\n\n  ResizeSensor.prototype.componentWillUnmount = function () {\n    this.observer.disconnect();\n  };\n  /**\n   * Observe the DOM element, if defined and different from the currently\n   * observed element. Pass `force` argument to skip element checks and always\n   * re-observe.\n   */\n\n\n  ResizeSensor.prototype.observeElement = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    var element = this.getElement();\n\n    if (!(element instanceof Element)) {\n      // stop everything if not defined\n      this.observer.disconnect();\n      return;\n    }\n\n    if (element === this.element && !force) {\n      // quit if given same element -- nothing to update (unless forced)\n      return;\n    } else {\n      // clear observer list if new element\n      this.observer.disconnect(); // remember element reference for next time\n\n      this.element = element;\n    } // observer callback is invoked immediately when observing new elements\n\n\n    this.observer.observe(element);\n\n    if (this.props.observeParents) {\n      var parent_1 = element.parentElement;\n\n      while (parent_1 != null) {\n        this.observer.observe(parent_1);\n        parent_1 = parent_1.parentElement;\n      }\n    }\n  };\n\n  ResizeSensor.prototype.getElement = function () {\n    try {\n      // using findDOMNode for two reasons:\n      // 1. cloning to insert a ref is unwieldy and not performant.\n      // 2. ensure that we resolve to an actual DOM node (instead of any JSX ref instance).\n      // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n\n      /* eslint-disable-next-line react/no-find-dom-node */\n      return findDOMNode(this);\n    } catch (_a) {\n      // swallow error if findDOMNode is run on unmounted component.\n      return null;\n    }\n  };\n\n  ResizeSensor.displayName = DISPLAYNAME_PREFIX + \".ResizeSensor\";\n  ResizeSensor = __decorate([polyfill], ResizeSensor);\n  return ResizeSensor;\n}(AbstractPureComponent2);\n\nexport { ResizeSensor };","map":{"version":3,"sources":["../../../../src/components/resize-sensor/resizeSensor.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __decorate, __extends } from \"tslib\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport { AbstractPureComponent2 } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nvar ResizeSensor = /** @class */ (function (_super) {\n    __extends(ResizeSensor, _super);\n    function ResizeSensor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.element = null;\n        _this.observer = new ResizeObserver(function (entries) { var _a, _b; return (_b = (_a = _this.props).onResize) === null || _b === void 0 ? void 0 : _b.call(_a, entries); });\n        return _this;\n    }\n    ResizeSensor.prototype.render = function () {\n        // pass-through render of single child\n        return React.Children.only(this.props.children);\n    };\n    ResizeSensor.prototype.componentDidMount = function () {\n        this.observeElement();\n    };\n    ResizeSensor.prototype.componentDidUpdate = function (prevProps) {\n        this.observeElement(this.props.observeParents !== prevProps.observeParents);\n    };\n    ResizeSensor.prototype.componentWillUnmount = function () {\n        this.observer.disconnect();\n    };\n    /**\n     * Observe the DOM element, if defined and different from the currently\n     * observed element. Pass `force` argument to skip element checks and always\n     * re-observe.\n     */\n    ResizeSensor.prototype.observeElement = function (force) {\n        if (force === void 0) { force = false; }\n        var element = this.getElement();\n        if (!(element instanceof Element)) {\n            // stop everything if not defined\n            this.observer.disconnect();\n            return;\n        }\n        if (element === this.element && !force) {\n            // quit if given same element -- nothing to update (unless forced)\n            return;\n        }\n        else {\n            // clear observer list if new element\n            this.observer.disconnect();\n            // remember element reference for next time\n            this.element = element;\n        }\n        // observer callback is invoked immediately when observing new elements\n        this.observer.observe(element);\n        if (this.props.observeParents) {\n            var parent_1 = element.parentElement;\n            while (parent_1 != null) {\n                this.observer.observe(parent_1);\n                parent_1 = parent_1.parentElement;\n            }\n        }\n    };\n    ResizeSensor.prototype.getElement = function () {\n        try {\n            // using findDOMNode for two reasons:\n            // 1. cloning to insert a ref is unwieldy and not performant.\n            // 2. ensure that we resolve to an actual DOM node (instead of any JSX ref instance).\n            // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n            /* eslint-disable-next-line react/no-find-dom-node */\n            return findDOMNode(this);\n        }\n        catch (_a) {\n            // swallow error if findDOMNode is run on unmounted component.\n            return null;\n        }\n    };\n    ResizeSensor.displayName = DISPLAYNAME_PREFIX + \".ResizeSensor\";\n    ResizeSensor = __decorate([\n        polyfill\n    ], ResizeSensor);\n    return ResizeSensor;\n}(AbstractPureComponent2));\nexport { ResizeSensor };\n//# sourceMappingURL=resizeSensor.js.map"]},"metadata":{},"sourceType":"module"}