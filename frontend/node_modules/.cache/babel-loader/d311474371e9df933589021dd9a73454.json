{"ast":null,"code":"/* !\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends, __rest } from \"tslib\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n/**\n * A stateful wrapper around the low-level <input> component which works around a\n * [React bug](https://github.com/facebook/react/issues/3926). This bug is reproduced when an input\n * receives CompositionEvents (for example, through IME composition) and has its value prop updated\n * asychronously. This might happen if a component chooses to do async validation of a value\n * returned by the input's `onChange` callback.\n *\n * Note: this component does not apply any Blueprint-specific styling.\n */\n\nvar AsyncControllableInput =\n/** @class */\nfunction (_super) {\n  __extends(AsyncControllableInput, _super);\n\n  function AsyncControllableInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      hasPendingUpdate: false,\n      isComposing: false,\n      nextValue: _this.props.value,\n      value: _this.props.value\n    };\n\n    _this.handleCompositionStart = function (e) {\n      var _a, _b;\n\n      _this.setState({\n        isComposing: true,\n        // Make sure that localValue matches externalValue, in case externalValue\n        // has changed since the last onChange event.\n        nextValue: _this.state.value\n      });\n\n      (_b = (_a = _this.props).onCompositionStart) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n\n    _this.handleCompositionEnd = function (e) {\n      var _a, _b;\n\n      _this.setState({\n        isComposing: false\n      });\n\n      (_b = (_a = _this.props).onCompositionEnd) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n\n    _this.handleChange = function (e) {\n      var _a, _b;\n\n      var value = e.target.value;\n\n      _this.setState({\n        nextValue: value\n      });\n\n      (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n\n    return _this;\n  }\n\n  AsyncControllableInput.getDerivedStateFromProps = function (nextProps, nextState) {\n    if (nextState.isComposing || nextProps.value === undefined) {\n      // don't derive anything from props if:\n      // - in uncontrolled mode, OR\n      // - currently composing, since we'll do that after composition ends\n      return null;\n    }\n\n    var userTriggeredUpdate = nextState.nextValue !== nextState.value;\n\n    if (userTriggeredUpdate) {\n      if (nextProps.value === nextState.nextValue) {\n        // parent has processed and accepted our update\n        if (nextState.hasPendingUpdate) {\n          return {\n            value: nextProps.value,\n            hasPendingUpdate: false\n          };\n        } else {\n          return {\n            value: nextState.nextValue\n          };\n        }\n      } else {\n        if (nextProps.value === nextState.value) {\n          // we have sent the update to our parent, but it has not been processed yet. just wait.\n          // DO NOT set nextValue here, since that will temporarily render a potentially stale controlled value,\n          // causing the cursor to jump once the new value is accepted\n          return {\n            hasPendingUpdate: true\n          };\n        } // accept controlled update overriding user action\n\n\n        return {\n          value: nextProps.value,\n          nextValue: nextProps.value,\n          hasPendingUpdate: false\n        };\n      }\n    } else {\n      // accept controlled update, could be confirming or denying user action\n      return {\n        value: nextProps.value,\n        nextValue: nextProps.value,\n        hasPendingUpdate: false\n      };\n    }\n  };\n\n  AsyncControllableInput.prototype.render = function () {\n    var _a = this.state,\n        isComposing = _a.isComposing,\n        hasPendingUpdate = _a.hasPendingUpdate,\n        value = _a.value,\n        nextValue = _a.nextValue;\n\n    var _b = this.props,\n        inputRef = _b.inputRef,\n        restProps = __rest(_b, [\"inputRef\"]);\n\n    return React.createElement(\"input\", __assign({}, restProps, {\n      ref: inputRef,\n      // render the pending value even if it is not confirmed by a parent's async controlled update\n      // so that the cursor does not jump to the end of input as reported in\n      // https://github.com/palantir/blueprint/issues/4298\n      value: isComposing || hasPendingUpdate ? nextValue : value,\n      onCompositionStart: this.handleCompositionStart,\n      onCompositionEnd: this.handleCompositionEnd,\n      onChange: this.handleChange\n    }));\n  };\n\n  AsyncControllableInput.displayName = DISPLAYNAME_PREFIX + \".AsyncControllableInput\";\n  AsyncControllableInput = __decorate([polyfill], AsyncControllableInput);\n  return AsyncControllableInput;\n}(React.PureComponent);\n\nexport { AsyncControllableInput };","map":{"version":3,"sources":["../../../../src/components/forms/asyncControllableInput.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* !\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends, __rest } from \"tslib\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n/**\n * A stateful wrapper around the low-level <input> component which works around a\n * [React bug](https://github.com/facebook/react/issues/3926). This bug is reproduced when an input\n * receives CompositionEvents (for example, through IME composition) and has its value prop updated\n * asychronously. This might happen if a component chooses to do async validation of a value\n * returned by the input's `onChange` callback.\n *\n * Note: this component does not apply any Blueprint-specific styling.\n */\nvar AsyncControllableInput = /** @class */ (function (_super) {\n    __extends(AsyncControllableInput, _super);\n    function AsyncControllableInput() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            hasPendingUpdate: false,\n            isComposing: false,\n            nextValue: _this.props.value,\n            value: _this.props.value,\n        };\n        _this.handleCompositionStart = function (e) {\n            var _a, _b;\n            _this.setState({\n                isComposing: true,\n                // Make sure that localValue matches externalValue, in case externalValue\n                // has changed since the last onChange event.\n                nextValue: _this.state.value,\n            });\n            (_b = (_a = _this.props).onCompositionStart) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        };\n        _this.handleCompositionEnd = function (e) {\n            var _a, _b;\n            _this.setState({ isComposing: false });\n            (_b = (_a = _this.props).onCompositionEnd) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        };\n        _this.handleChange = function (e) {\n            var _a, _b;\n            var value = e.target.value;\n            _this.setState({ nextValue: value });\n            (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        };\n        return _this;\n    }\n    AsyncControllableInput.getDerivedStateFromProps = function (nextProps, nextState) {\n        if (nextState.isComposing || nextProps.value === undefined) {\n            // don't derive anything from props if:\n            // - in uncontrolled mode, OR\n            // - currently composing, since we'll do that after composition ends\n            return null;\n        }\n        var userTriggeredUpdate = nextState.nextValue !== nextState.value;\n        if (userTriggeredUpdate) {\n            if (nextProps.value === nextState.nextValue) {\n                // parent has processed and accepted our update\n                if (nextState.hasPendingUpdate) {\n                    return { value: nextProps.value, hasPendingUpdate: false };\n                }\n                else {\n                    return { value: nextState.nextValue };\n                }\n            }\n            else {\n                if (nextProps.value === nextState.value) {\n                    // we have sent the update to our parent, but it has not been processed yet. just wait.\n                    // DO NOT set nextValue here, since that will temporarily render a potentially stale controlled value,\n                    // causing the cursor to jump once the new value is accepted\n                    return { hasPendingUpdate: true };\n                }\n                // accept controlled update overriding user action\n                return { value: nextProps.value, nextValue: nextProps.value, hasPendingUpdate: false };\n            }\n        }\n        else {\n            // accept controlled update, could be confirming or denying user action\n            return { value: nextProps.value, nextValue: nextProps.value, hasPendingUpdate: false };\n        }\n    };\n    AsyncControllableInput.prototype.render = function () {\n        var _a = this.state, isComposing = _a.isComposing, hasPendingUpdate = _a.hasPendingUpdate, value = _a.value, nextValue = _a.nextValue;\n        var _b = this.props, inputRef = _b.inputRef, restProps = __rest(_b, [\"inputRef\"]);\n        return (React.createElement(\"input\", __assign({}, restProps, { ref: inputRef, \n            // render the pending value even if it is not confirmed by a parent's async controlled update\n            // so that the cursor does not jump to the end of input as reported in\n            // https://github.com/palantir/blueprint/issues/4298\n            value: isComposing || hasPendingUpdate ? nextValue : value, onCompositionStart: this.handleCompositionStart, onCompositionEnd: this.handleCompositionEnd, onChange: this.handleChange })));\n    };\n    AsyncControllableInput.displayName = DISPLAYNAME_PREFIX + \".AsyncControllableInput\";\n    AsyncControllableInput = __decorate([\n        polyfill\n    ], AsyncControllableInput);\n    return AsyncControllableInput;\n}(React.PureComponent));\nexport { AsyncControllableInput };\n//# sourceMappingURL=asyncControllableInput.js.map"]},"metadata":{},"sourceType":"module"}