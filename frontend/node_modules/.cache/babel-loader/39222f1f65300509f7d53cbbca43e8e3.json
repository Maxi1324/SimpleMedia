{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __spreadArrays } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { PanelView2 } from \"./panelView2\";\n/**\n * @template T type union of all possible panels in this stack\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport var PanelStack2 = function (props) {\n  var _a = props.renderActivePanelOnly,\n      renderActivePanelOnly = _a === void 0 ? true : _a,\n      _b = props.showPanelHeader,\n      showPanelHeader = _b === void 0 ? true : _b;\n\n  var _c = React.useState(\"push\"),\n      direction = _c[0],\n      setDirection = _c[1];\n\n  var _d = React.useState(props.initialPanel !== undefined ? [props.initialPanel] : []),\n      localStack = _d[0],\n      setLocalStack = _d[1];\n\n  var stack = props.stack != null ? props.stack.slice().reverse() : localStack;\n\n  if (stack.length === 0) {\n    return null;\n  }\n\n  var handlePanelOpen = React.useCallback(function (panel) {\n    var _a;\n\n    (_a = props.onOpen) === null || _a === void 0 ? void 0 : _a.call(props, panel);\n\n    if (props.stack == null) {\n      setDirection(\"push\");\n      setLocalStack(function (prevStack) {\n        return __spreadArrays([panel], prevStack);\n      });\n    }\n  }, [props.onOpen]);\n  var handlePanelClose = React.useCallback(function (panel) {\n    var _a; // only remove this panel if it is at the top and not the only one.\n\n\n    if (stack[0] !== panel || stack.length <= 1) {\n      return;\n    }\n\n    (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props, panel);\n\n    if (props.stack == null) {\n      setDirection(\"pop\");\n      setLocalStack(function (prevStack) {\n        return prevStack.slice(1);\n      });\n    }\n  }, [stack, props.onClose]);\n  var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n  var panels = panelsToRender.map(function (panel, index) {\n    // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n    // therefore they would not trigger the \"enter\" transition event as they were entered.\n    // To force the enter event, we want to change the key, but stack.length is not enough\n    // and a single panel should not rerender as long as it's hidden.\n    // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n    // second one, active changes only when the panel becomes or stops being active.\n    var layer = stack.length - index;\n    var key = renderActivePanelOnly ? stack.length : layer;\n    return React.createElement(CSSTransition, {\n      classNames: Classes.PANEL_STACK2,\n      key: key,\n      timeout: 400\n    }, React.createElement(PanelView2, {\n      onClose: handlePanelClose,\n      onOpen: handlePanelOpen,\n      panel: panel,\n      previousPanel: stack[index + 1],\n      showHeader: showPanelHeader\n    }));\n  }).reverse();\n  var classes = classNames(Classes.PANEL_STACK2, Classes.PANEL_STACK2 + \"-\" + direction, props.className);\n  return React.createElement(TransitionGroup, {\n    className: classes,\n    component: \"div\"\n  }, panels);\n};\nPanelStack2.displayName = DISPLAYNAME_PREFIX + \".PanelStack2\";","map":{"version":3,"sources":["../../../../src/components/panel-stack2/panelStack2.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __spreadArrays } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { PanelView2 } from \"./panelView2\";\n/**\n * @template T type union of all possible panels in this stack\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport var PanelStack2 = function (props) {\n    var _a = props.renderActivePanelOnly, renderActivePanelOnly = _a === void 0 ? true : _a, _b = props.showPanelHeader, showPanelHeader = _b === void 0 ? true : _b;\n    var _c = React.useState(\"push\"), direction = _c[0], setDirection = _c[1];\n    var _d = React.useState(props.initialPanel !== undefined ? [props.initialPanel] : []), localStack = _d[0], setLocalStack = _d[1];\n    var stack = props.stack != null ? props.stack.slice().reverse() : localStack;\n    if (stack.length === 0) {\n        return null;\n    }\n    var handlePanelOpen = React.useCallback(function (panel) {\n        var _a;\n        (_a = props.onOpen) === null || _a === void 0 ? void 0 : _a.call(props, panel);\n        if (props.stack == null) {\n            setDirection(\"push\");\n            setLocalStack(function (prevStack) { return __spreadArrays([panel], prevStack); });\n        }\n    }, [props.onOpen]);\n    var handlePanelClose = React.useCallback(function (panel) {\n        var _a;\n        // only remove this panel if it is at the top and not the only one.\n        if (stack[0] !== panel || stack.length <= 1) {\n            return;\n        }\n        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props, panel);\n        if (props.stack == null) {\n            setDirection(\"pop\");\n            setLocalStack(function (prevStack) { return prevStack.slice(1); });\n        }\n    }, [stack, props.onClose]);\n    var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n    var panels = panelsToRender\n        .map(function (panel, index) {\n        // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n        // therefore they would not trigger the \"enter\" transition event as they were entered.\n        // To force the enter event, we want to change the key, but stack.length is not enough\n        // and a single panel should not rerender as long as it's hidden.\n        // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n        // second one, active changes only when the panel becomes or stops being active.\n        var layer = stack.length - index;\n        var key = renderActivePanelOnly ? stack.length : layer;\n        return (React.createElement(CSSTransition, { classNames: Classes.PANEL_STACK2, key: key, timeout: 400 },\n            React.createElement(PanelView2, { onClose: handlePanelClose, onOpen: handlePanelOpen, panel: panel, previousPanel: stack[index + 1], showHeader: showPanelHeader })));\n    })\n        .reverse();\n    var classes = classNames(Classes.PANEL_STACK2, Classes.PANEL_STACK2 + \"-\" + direction, props.className);\n    return (React.createElement(TransitionGroup, { className: classes, component: \"div\" }, panels));\n};\nPanelStack2.displayName = DISPLAYNAME_PREFIX + \".PanelStack2\";\n//# sourceMappingURL=panelStack2.js.map"]},"metadata":{},"sourceType":"module"}