{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { clamp } from \"../../common/utils\";\n/** Returns the `decimal` number separator based on locale */\n\nfunction getDecimalSeparator(locale) {\n  var testNumber = 1.9;\n  var testText = testNumber.toLocaleString(locale);\n  var one = 1 .toLocaleString(locale);\n  var nine = 9 .toLocaleString(locale);\n  var pattern = one + \"(.+)\" + nine;\n  var result = new RegExp(pattern).exec(testText);\n  return result && result[1] || \".\";\n}\n\nexport function toLocaleString(num, locale) {\n  if (locale === void 0) {\n    locale = \"en-US\";\n  }\n\n  return sanitizeNumericInput(num.toLocaleString(locale), locale);\n}\nexport function clampValue(value, min, max) {\n  // defaultProps won't work if the user passes in null, so just default\n  // to +/- infinity here instead, as a catch-all.\n  var adjustedMin = min != null ? min : -Infinity;\n  var adjustedMax = max != null ? max : Infinity;\n  return clamp(value, adjustedMin, adjustedMax);\n}\nexport function getValueOrEmptyValue(value) {\n  if (value === void 0) {\n    value = \"\";\n  }\n\n  return value.toString();\n}\n/** Transform the localized character (ex. \"\") to a javascript recognizable string number (ex. \"10.99\")  */\n\nfunction transformLocalizedNumberToStringNumber(character, locale) {\n  var charactersMap = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (value) {\n    return value.toLocaleString(locale);\n  });\n  var jsNumber = charactersMap.indexOf(character);\n\n  if (jsNumber !== -1) {\n    return jsNumber;\n  } else {\n    return character;\n  }\n}\n/** Transforms the localized number (ex. \"10,99\") to a javascript recognizable string number (ex. \"10.99\")  */\n\n\nexport function parseStringToStringNumber(value, locale) {\n  var valueAsString = \"\" + value;\n\n  if (parseFloat(valueAsString).toString() === value.toString()) {\n    return value.toString();\n  }\n\n  if (locale !== undefined) {\n    var decimalSeparator = getDecimalSeparator(locale);\n    var sanitizedString = sanitizeNumericInput(valueAsString, locale);\n    return sanitizedString.split(\"\").map(function (character) {\n      return transformLocalizedNumberToStringNumber(character, locale);\n    }).join(\"\").replace(decimalSeparator, \".\");\n  }\n\n  return value.toString();\n}\n/** Returns `true` if the string represents a valid numeric value, like \"1e6\". */\n\nexport function isValueNumeric(value, locale) {\n  // checking if a string is numeric in Typescript is a big pain, because\n  // we can't simply toss a string parameter to isFinite. below is the\n  // essential approach that jQuery uses, which involves subtracting a\n  // parsed numeric value from the string representation of the value. we\n  // need to cast the value to the `any` type to allow this operation\n  // between dissimilar types.\n  var stringToStringNumber = parseStringToStringNumber(value, locale);\n  return value != null && stringToStringNumber - parseFloat(stringToStringNumber) + 1 >= 0;\n}\nexport function isValidNumericKeyboardEvent(e, locale) {\n  // unit tests may not include e.key. don't bother disabling those events.\n  if (e.key == null) {\n    return true;\n  } // allow modified key strokes that may involve letters and other\n  // non-numeric/invalid characters (Cmd + A, Cmd + C, Cmd + V, Cmd + X).\n\n\n  if (e.ctrlKey || e.altKey || e.metaKey) {\n    return true;\n  } // keys that print a single character when pressed have a `key` name of\n  // length 1. every other key has a longer `key` name (e.g. \"Backspace\",\n  // \"ArrowUp\", \"Shift\"). since none of those keys can print a character\n  // to the field--and since they may have important native behaviors\n  // beyond printing a character--we don't want to disable their effects.\n\n\n  var isSingleCharKey = e.key.length === 1;\n\n  if (!isSingleCharKey) {\n    return true;\n  } // now we can simply check that the single character that wants to be printed\n  // is a floating-point number character that we're allowed to print.\n\n\n  return isFloatingPointNumericCharacter(e.key, locale);\n}\n/**\n * A regex that matches a string of length 1 (i.e. a standalone character)\n * if and only if it is a floating-point number character as defined by W3C:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n *\n * Floating-point number characters are the only characters that can be\n * printed within a default input[type=\"number\"]. This component should\n * behave the same way when this.props.allowNumericCharactersOnly = true.\n * See here for the input[type=\"number\"].value spec:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/input.number.html#input.number.attrs.value\n */\n\nfunction isFloatingPointNumericCharacter(character, locale) {\n  if (locale !== undefined) {\n    var decimalSeparator = getDecimalSeparator(locale).replace(\".\", \"\\\\.\");\n    var numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (value) {\n      return value.toLocaleString(locale);\n    }).join(\"\");\n    var localeFloatingPointNumericCharacterRegex = new RegExp(\"^[Ee\" + numbers + \"\\\\+\\\\-\" + decimalSeparator + \"]$\");\n    return localeFloatingPointNumericCharacterRegex.test(character);\n  } else {\n    var floatingPointNumericCharacterRegex = /^[Ee0-9\\+\\-\\.]$/;\n    return floatingPointNumericCharacterRegex.test(character);\n  }\n}\n/**\n * Round the value to have _up to_ the specified maximum precision.\n *\n * This differs from `toFixed(5)` in that trailing zeroes are not added on\n * more precise values, resulting in shorter strings.\n */\n\n\nexport function toMaxPrecision(value, maxPrecision) {\n  // round the value to have the specified maximum precision (toFixed is the wrong choice,\n  // because it would show trailing zeros in the decimal part out to the specified precision)\n  // source: http://stackoverflow.com/a/18358056/5199574\n  var scaleFactor = Math.pow(10, maxPrecision);\n  return Math.round(value * scaleFactor) / scaleFactor;\n}\n/**\n * Convert Japanese full-width numbers, e.g. 'ï¼•', to ASCII, e.g. '5'\n * This should be called before performing any other numeric string input validation.\n */\n\nfunction convertFullWidthNumbersToAscii(value) {\n  return value.replace(/[\\uFF10-\\uFF19]/g, function (m) {\n    return String.fromCharCode(m.charCodeAt(0) - 0xfee0);\n  });\n}\n/**\n * Convert full-width (Japanese) numbers to ASCII, and strip all characters that are not valid floating-point numeric characters\n */\n\n\nexport function sanitizeNumericInput(value, locale) {\n  var valueChars = convertFullWidthNumbersToAscii(value).split(\"\");\n  var sanitizedValueChars = valueChars.filter(function (valueChar) {\n    return isFloatingPointNumericCharacter(valueChar, locale);\n  });\n  return sanitizedValueChars.join(\"\");\n}","map":{"version":3,"sources":["../../../../src/components/forms/numericInputUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { clamp } from \"../../common/utils\";\n/** Returns the `decimal` number separator based on locale */\nfunction getDecimalSeparator(locale) {\n    var testNumber = 1.9;\n    var testText = testNumber.toLocaleString(locale);\n    var one = (1).toLocaleString(locale);\n    var nine = (9).toLocaleString(locale);\n    var pattern = one + \"(.+)\" + nine;\n    var result = new RegExp(pattern).exec(testText);\n    return (result && result[1]) || \".\";\n}\nexport function toLocaleString(num, locale) {\n    if (locale === void 0) { locale = \"en-US\"; }\n    return sanitizeNumericInput(num.toLocaleString(locale), locale);\n}\nexport function clampValue(value, min, max) {\n    // defaultProps won't work if the user passes in null, so just default\n    // to +/- infinity here instead, as a catch-all.\n    var adjustedMin = min != null ? min : -Infinity;\n    var adjustedMax = max != null ? max : Infinity;\n    return clamp(value, adjustedMin, adjustedMax);\n}\nexport function getValueOrEmptyValue(value) {\n    if (value === void 0) { value = \"\"; }\n    return value.toString();\n}\n/** Transform the localized character (ex. \"\") to a javascript recognizable string number (ex. \"10.99\")  */\nfunction transformLocalizedNumberToStringNumber(character, locale) {\n    var charactersMap = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (value) { return value.toLocaleString(locale); });\n    var jsNumber = charactersMap.indexOf(character);\n    if (jsNumber !== -1) {\n        return jsNumber;\n    }\n    else {\n        return character;\n    }\n}\n/** Transforms the localized number (ex. \"10,99\") to a javascript recognizable string number (ex. \"10.99\")  */\nexport function parseStringToStringNumber(value, locale) {\n    var valueAsString = \"\" + value;\n    if (parseFloat(valueAsString).toString() === value.toString()) {\n        return value.toString();\n    }\n    if (locale !== undefined) {\n        var decimalSeparator = getDecimalSeparator(locale);\n        var sanitizedString = sanitizeNumericInput(valueAsString, locale);\n        return sanitizedString\n            .split(\"\")\n            .map(function (character) { return transformLocalizedNumberToStringNumber(character, locale); })\n            .join(\"\")\n            .replace(decimalSeparator, \".\");\n    }\n    return value.toString();\n}\n/** Returns `true` if the string represents a valid numeric value, like \"1e6\". */\nexport function isValueNumeric(value, locale) {\n    // checking if a string is numeric in Typescript is a big pain, because\n    // we can't simply toss a string parameter to isFinite. below is the\n    // essential approach that jQuery uses, which involves subtracting a\n    // parsed numeric value from the string representation of the value. we\n    // need to cast the value to the `any` type to allow this operation\n    // between dissimilar types.\n    var stringToStringNumber = parseStringToStringNumber(value, locale);\n    return value != null && stringToStringNumber - parseFloat(stringToStringNumber) + 1 >= 0;\n}\nexport function isValidNumericKeyboardEvent(e, locale) {\n    // unit tests may not include e.key. don't bother disabling those events.\n    if (e.key == null) {\n        return true;\n    }\n    // allow modified key strokes that may involve letters and other\n    // non-numeric/invalid characters (Cmd + A, Cmd + C, Cmd + V, Cmd + X).\n    if (e.ctrlKey || e.altKey || e.metaKey) {\n        return true;\n    }\n    // keys that print a single character when pressed have a `key` name of\n    // length 1. every other key has a longer `key` name (e.g. \"Backspace\",\n    // \"ArrowUp\", \"Shift\"). since none of those keys can print a character\n    // to the field--and since they may have important native behaviors\n    // beyond printing a character--we don't want to disable their effects.\n    var isSingleCharKey = e.key.length === 1;\n    if (!isSingleCharKey) {\n        return true;\n    }\n    // now we can simply check that the single character that wants to be printed\n    // is a floating-point number character that we're allowed to print.\n    return isFloatingPointNumericCharacter(e.key, locale);\n}\n/**\n * A regex that matches a string of length 1 (i.e. a standalone character)\n * if and only if it is a floating-point number character as defined by W3C:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n *\n * Floating-point number characters are the only characters that can be\n * printed within a default input[type=\"number\"]. This component should\n * behave the same way when this.props.allowNumericCharactersOnly = true.\n * See here for the input[type=\"number\"].value spec:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/input.number.html#input.number.attrs.value\n */\nfunction isFloatingPointNumericCharacter(character, locale) {\n    if (locale !== undefined) {\n        var decimalSeparator = getDecimalSeparator(locale).replace(\".\", \"\\\\.\");\n        var numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (value) { return value.toLocaleString(locale); }).join(\"\");\n        var localeFloatingPointNumericCharacterRegex = new RegExp(\"^[Ee\" + numbers + \"\\\\+\\\\-\" + decimalSeparator + \"]$\");\n        return localeFloatingPointNumericCharacterRegex.test(character);\n    }\n    else {\n        var floatingPointNumericCharacterRegex = /^[Ee0-9\\+\\-\\.]$/;\n        return floatingPointNumericCharacterRegex.test(character);\n    }\n}\n/**\n * Round the value to have _up to_ the specified maximum precision.\n *\n * This differs from `toFixed(5)` in that trailing zeroes are not added on\n * more precise values, resulting in shorter strings.\n */\nexport function toMaxPrecision(value, maxPrecision) {\n    // round the value to have the specified maximum precision (toFixed is the wrong choice,\n    // because it would show trailing zeros in the decimal part out to the specified precision)\n    // source: http://stackoverflow.com/a/18358056/5199574\n    var scaleFactor = Math.pow(10, maxPrecision);\n    return Math.round(value * scaleFactor) / scaleFactor;\n}\n/**\n * Convert Japanese full-width numbers, e.g. 'ï¼•', to ASCII, e.g. '5'\n * This should be called before performing any other numeric string input validation.\n */\nfunction convertFullWidthNumbersToAscii(value) {\n    return value.replace(/[\\uFF10-\\uFF19]/g, function (m) { return String.fromCharCode(m.charCodeAt(0) - 0xfee0); });\n}\n/**\n * Convert full-width (Japanese) numbers to ASCII, and strip all characters that are not valid floating-point numeric characters\n */\nexport function sanitizeNumericInput(value, locale) {\n    var valueChars = convertFullWidthNumbersToAscii(value).split(\"\");\n    var sanitizedValueChars = valueChars.filter(function (valueChar) { return isFloatingPointNumericCharacter(valueChar, locale); });\n    return sanitizedValueChars.join(\"\");\n}\n//# sourceMappingURL=numericInputUtils.js.map"]},"metadata":{},"sourceType":"module"}