{"ast":null,"code":"/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CLAMP_MIN_MAX } from \"../errors\";\n/** Returns whether `process.env.NODE_ENV` exists and equals `env`. */\n\nexport function isNodeEnv(env) {\n  return typeof process !== \"undefined\" && process.env && process.env.NODE_ENV === env;\n}\n/**\n * Returns the difference in length between two arrays. A `null` argument is\n * considered an empty list. The return value will be positive if `a` is longer\n * than `b`, negative if the opposite is true, and zero if their lengths are\n * equal.\n */\n\nexport function arrayLengthCompare(a, b) {\n  if (a === void 0) {\n    a = [];\n  }\n\n  if (b === void 0) {\n    b = [];\n  }\n\n  return a.length - b.length;\n}\n/**\n * Returns true if the two numbers are within the given tolerance of each other.\n * This is useful to correct for floating point precision issues, less useful\n * for integers.\n */\n\nexport function approxEqual(a, b, tolerance) {\n  if (tolerance === void 0) {\n    tolerance = 0.00001;\n  }\n\n  return Math.abs(a - b) <= tolerance;\n}\n/**\n * Clamps the given number between min and max values. Returns value if within\n * range, or closest bound.\n */\n\nexport function clamp(val, min, max) {\n  if (val == null) {\n    return val;\n  }\n\n  if (max < min) {\n    throw new Error(CLAMP_MIN_MAX);\n  }\n\n  return Math.min(Math.max(val, min), max);\n}\n/** Returns the number of decimal places in the given number. */\n\nexport function countDecimalPlaces(num) {\n  if (!isFinite(num)) {\n    return 0;\n  }\n\n  var e = 1;\n  var p = 0;\n\n  while (Math.round(num * e) / e !== num) {\n    e *= 10;\n    p++;\n  }\n\n  return p;\n}","map":{"version":3,"sources":["../../../../src/common/utils/jsUtils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,aAAT,QAA8B,WAA9B;AAKA;;AACA,OAAM,SAAU,SAAV,CAAoB,GAApB,EAA+B;AACjC,SAAO,OAAO,OAAP,KAAmB,WAAnB,IAAkC,OAAO,CAAC,GAA1C,IAAiD,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,GAAjF;AACH;AAED;;;;;AAKG;;AACH,OAAM,SAAU,kBAAV,CAA6B,CAA7B,EAA4C,CAA5C,EAAyD;AAA5B,MAAA,CAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,CAAA,GAAA,EAAA;AAAa;;AAAE,MAAA,CAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,CAAA,GAAA,EAAA;AAAa;;AAC3D,SAAO,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAApB;AACH;AAED;;;;AAIG;;AACH,OAAM,SAAU,WAAV,CAAsB,CAAtB,EAAiC,CAAjC,EAA4C,SAA5C,EAA+D;AAAnB,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,OAAA;AAAmB;;AACjE,SAAO,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,KAAmB,SAA1B;AACH;AAED;;;AAGG;;AACH,OAAM,SAAU,KAAV,CAAgB,GAAhB,EAA6B,GAA7B,EAA0C,GAA1C,EAAqD;AACvD,MAAI,GAAG,IAAI,IAAX,EAAiB;AACb,WAAO,GAAP;AACH;;AACD,MAAI,GAAG,GAAG,GAAV,EAAe;AACX,UAAM,IAAI,KAAJ,CAAU,aAAV,CAAN;AACH;;AACD,SAAO,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,GAAd,CAAT,EAA6B,GAA7B,CAAP;AACH;AAED;;AACA,OAAM,SAAU,kBAAV,CAA6B,GAA7B,EAAwC;AAC1C,MAAI,CAAC,QAAQ,CAAC,GAAD,CAAb,EAAoB;AAChB,WAAO,CAAP;AACH;;AACD,MAAI,CAAC,GAAG,CAAR;AACA,MAAI,CAAC,GAAG,CAAR;;AACA,SAAO,IAAI,CAAC,KAAL,CAAW,GAAG,GAAG,CAAjB,IAAsB,CAAtB,KAA4B,GAAnC,EAAwC;AACpC,IAAA,CAAC,IAAI,EAAL;AACA,IAAA,CAAC;AACJ;;AACD,SAAO,CAAP;AACH","sourceRoot":"","sourcesContent":["/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CLAMP_MIN_MAX } from \"../errors\";\n/** Returns whether `process.env.NODE_ENV` exists and equals `env`. */\nexport function isNodeEnv(env) {\n    return typeof process !== \"undefined\" && process.env && process.env.NODE_ENV === env;\n}\n/**\n * Returns the difference in length between two arrays. A `null` argument is\n * considered an empty list. The return value will be positive if `a` is longer\n * than `b`, negative if the opposite is true, and zero if their lengths are\n * equal.\n */\nexport function arrayLengthCompare(a, b) {\n    if (a === void 0) { a = []; }\n    if (b === void 0) { b = []; }\n    return a.length - b.length;\n}\n/**\n * Returns true if the two numbers are within the given tolerance of each other.\n * This is useful to correct for floating point precision issues, less useful\n * for integers.\n */\nexport function approxEqual(a, b, tolerance) {\n    if (tolerance === void 0) { tolerance = 0.00001; }\n    return Math.abs(a - b) <= tolerance;\n}\n/**\n * Clamps the given number between min and max values. Returns value if within\n * range, or closest bound.\n */\nexport function clamp(val, min, max) {\n    if (val == null) {\n        return val;\n    }\n    if (max < min) {\n        throw new Error(CLAMP_MIN_MAX);\n    }\n    return Math.min(Math.max(val, min), max);\n}\n/** Returns the number of decimal places in the given number. */\nexport function countDecimalPlaces(num) {\n    if (!isFinite(num)) {\n        return 0;\n    }\n    var e = 1;\n    var p = 0;\n    while (Math.round(num * e) / e !== num) {\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n//# sourceMappingURL=jsUtils.js.map"]},"metadata":{},"sourceType":"module"}