{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes, Keys } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\";\nimport { Browser } from \"../../compatibility\";\nvar BUFFER_WIDTH_DEFAULT = 5;\nvar BUFFER_WIDTH_IE = 30;\n\nvar EditableText =\n/** @class */\nfunction (_super) {\n  __extends(EditableText, _super);\n\n  function EditableText(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.inputElement = null;\n    _this.valueElement = null;\n    _this.refHandlers = {\n      content: function (spanElement) {\n        _this.valueElement = spanElement;\n      },\n      input: function (input) {\n        if (input != null) {\n          _this.inputElement = input; // temporary fix for #3882\n\n          if (!_this.props.alwaysRenderInput) {\n            _this.inputElement.focus();\n          }\n\n          if (_this.state != null && _this.state.isEditing) {\n            var supportsSelection = inputSupportsSelection(input);\n\n            if (supportsSelection) {\n              var length_1 = input.value.length;\n              input.setSelectionRange(_this.props.selectAllOnFocus ? 0 : length_1, length_1);\n            }\n\n            if (!supportsSelection || !_this.props.selectAllOnFocus) {\n              input.scrollLeft = input.scrollWidth;\n            }\n          }\n        }\n      }\n    };\n\n    _this.cancelEditing = function () {\n      var _a, _b, _c, _d;\n\n      var _e = _this.state,\n          lastValue = _e.lastValue,\n          value = _e.value;\n\n      _this.setState({\n        isEditing: false,\n        value: lastValue\n      });\n\n      if (value !== lastValue) {\n        (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, lastValue);\n      }\n\n      (_d = (_c = _this.props).onCancel) === null || _d === void 0 ? void 0 : _d.call(_c, lastValue);\n    };\n\n    _this.toggleEditing = function () {\n      var _a, _b;\n\n      if (_this.state.isEditing) {\n        var value = _this.state.value;\n\n        _this.setState({\n          isEditing: false,\n          lastValue: value\n        });\n\n        (_b = (_a = _this.props).onConfirm) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n      } else if (!_this.props.disabled) {\n        _this.setState({\n          isEditing: true\n        });\n      }\n    };\n\n    _this.handleFocus = function () {\n      var _a = _this.props,\n          alwaysRenderInput = _a.alwaysRenderInput,\n          disabled = _a.disabled,\n          selectAllOnFocus = _a.selectAllOnFocus;\n\n      if (!disabled) {\n        _this.setState({\n          isEditing: true\n        });\n      }\n\n      if (alwaysRenderInput && selectAllOnFocus && _this.inputElement != null) {\n        var length_2 = _this.inputElement.value.length;\n\n        _this.inputElement.setSelectionRange(0, length_2);\n      }\n    };\n\n    _this.handleTextChange = function (event) {\n      var _a, _b;\n\n      var value = event.target.value; // state value should be updated only when uncontrolled\n\n      if (_this.props.value == null) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    };\n\n    _this.handleKeyEvent = function (event) {\n      // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n\n      /* eslint-disable-next-line deprecation/deprecation */\n      var altKey = event.altKey,\n          ctrlKey = event.ctrlKey,\n          metaKey = event.metaKey,\n          shiftKey = event.shiftKey,\n          which = event.which;\n\n      if (which === Keys.ESCAPE) {\n        _this.cancelEditing();\n\n        return;\n      }\n\n      var hasModifierKey = altKey || ctrlKey || metaKey || shiftKey;\n\n      if (which === Keys.ENTER) {\n        // prevent IE11 from full screening with alt + enter\n        // shift + enter adds a newline by default\n        if (altKey || shiftKey) {\n          event.preventDefault();\n        }\n\n        if (_this.props.confirmOnEnterKey && _this.props.multiline) {\n          if (event.target != null && hasModifierKey) {\n            insertAtCaret(event.target, \"\\n\");\n\n            _this.handleTextChange(event);\n          } else {\n            _this.toggleEditing();\n          }\n        } else if (!_this.props.multiline || hasModifierKey) {\n          _this.toggleEditing();\n        }\n      }\n    };\n\n    var value = props.value == null ? props.defaultValue : props.value;\n    _this.state = {\n      inputHeight: 0,\n      inputWidth: 0,\n      isEditing: props.isEditing === true && props.disabled === false,\n      lastValue: value,\n      value: value\n    };\n    return _this;\n  }\n\n  EditableText.prototype.render = function () {\n    var _a;\n\n    var _b;\n\n    var _c = this.props,\n        alwaysRenderInput = _c.alwaysRenderInput,\n        disabled = _c.disabled,\n        multiline = _c.multiline;\n    var value = (_b = this.props.value) !== null && _b !== void 0 ? _b : this.state.value;\n    var hasValue = value != null && value !== \"\";\n    var classes = classNames(Classes.EDITABLE_TEXT, Classes.intentClass(this.props.intent), (_a = {}, _a[Classes.DISABLED] = disabled, _a[Classes.EDITABLE_TEXT_EDITING] = this.state.isEditing, _a[Classes.EDITABLE_TEXT_PLACEHOLDER] = !hasValue, _a[Classes.MULTILINE] = multiline, _a), this.props.className);\n    var contentStyle;\n\n    if (multiline) {\n      // set height only in multiline mode when not editing\n      // otherwise we're measuring this element to determine appropriate height of text\n      contentStyle = {\n        height: !this.state.isEditing ? this.state.inputHeight : undefined\n      };\n    } else {\n      // minWidth only applies in single line mode (multiline == width 100%)\n      contentStyle = {\n        height: this.state.inputHeight,\n        lineHeight: this.state.inputHeight != null ? this.state.inputHeight + \"px\" : undefined,\n        minWidth: this.props.minWidth\n      };\n    } // If we are always rendering an input, then NEVER make the container div focusable.\n    // Otherwise, make container div focusable when not editing, so it can still be tabbed\n    // to focus (when the input is rendered, it is itself focusable so container div doesn't need to be)\n\n\n    var tabIndex = alwaysRenderInput || this.state.isEditing || disabled ? undefined : 0; // we need the contents to be rendered while editing so that we can measure their height\n    // and size the container element responsively\n\n    var shouldHideContents = alwaysRenderInput && !this.state.isEditing;\n    return React.createElement(\"div\", {\n      className: classes,\n      onFocus: this.handleFocus,\n      tabIndex: tabIndex\n    }, alwaysRenderInput || this.state.isEditing ? this.renderInput(value) : undefined, shouldHideContents ? undefined : React.createElement(\"span\", {\n      className: Classes.EDITABLE_TEXT_CONTENT,\n      ref: this.refHandlers.content,\n      style: contentStyle\n    }, hasValue ? value : this.props.placeholder));\n  };\n\n  EditableText.prototype.componentDidMount = function () {\n    this.updateInputDimensions();\n  };\n\n  EditableText.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _a, _b;\n\n    var newState = {}; // allow setting the value to undefined/null in controlled mode\n\n    if (this.props.value !== prevProps.value && (prevProps.value != null || this.props.value != null)) {\n      newState.value = this.props.value;\n    }\n\n    if (this.props.isEditing != null && this.props.isEditing !== prevProps.isEditing) {\n      newState.isEditing = this.props.isEditing;\n    }\n\n    if (this.props.disabled || this.props.disabled == null && prevProps.disabled) {\n      newState.isEditing = false;\n    }\n\n    this.setState(newState);\n\n    if (this.state.isEditing && !prevState.isEditing) {\n      (_b = (_a = this.props).onEdit) === null || _b === void 0 ? void 0 : _b.call(_a, this.state.value);\n    }\n\n    this.updateInputDimensions();\n  };\n\n  EditableText.prototype.renderInput = function (value) {\n    var _a = this.props,\n        disabled = _a.disabled,\n        maxLength = _a.maxLength,\n        multiline = _a.multiline,\n        type = _a.type,\n        placeholder = _a.placeholder;\n    var props = {\n      className: Classes.EDITABLE_TEXT_INPUT,\n      disabled: disabled,\n      maxLength: maxLength,\n      onBlur: this.toggleEditing,\n      onChange: this.handleTextChange,\n      onKeyDown: this.handleKeyEvent,\n      placeholder: placeholder,\n      value: value\n    };\n    var _b = this.state,\n        inputHeight = _b.inputHeight,\n        inputWidth = _b.inputWidth;\n\n    if (inputHeight !== 0 && inputWidth !== 0) {\n      props.style = {\n        height: inputHeight,\n        lineHeight: !multiline && inputHeight != null ? inputHeight + \"px\" : undefined,\n        width: multiline ? \"100%\" : inputWidth\n      };\n    }\n\n    return multiline ? React.createElement(\"textarea\", __assign({\n      ref: this.refHandlers.input\n    }, props)) : React.createElement(\"input\", __assign({\n      ref: this.refHandlers.input,\n      type: type\n    }, props));\n  };\n\n  EditableText.prototype.updateInputDimensions = function () {\n    if (this.valueElement != null) {\n      var _a = this.props,\n          maxLines = _a.maxLines,\n          minLines = _a.minLines,\n          minWidth = _a.minWidth,\n          multiline = _a.multiline;\n      var _b = this.valueElement,\n          parentElement_1 = _b.parentElement,\n          textContent = _b.textContent;\n      var _c = this.valueElement,\n          scrollHeight_1 = _c.scrollHeight,\n          scrollWidth = _c.scrollWidth;\n      var lineHeight = getLineHeight(this.valueElement); // add one line to computed <span> height if text ends in newline\n      // because <span> collapses that trailing whitespace but <textarea> shows it\n\n      if (multiline && this.state.isEditing && /\\n$/.test(textContent !== null && textContent !== void 0 ? textContent : \"\")) {\n        scrollHeight_1 += lineHeight;\n      }\n\n      if (lineHeight > 0) {\n        // line height could be 0 if the isNaN block from getLineHeight kicks in\n        scrollHeight_1 = clamp(scrollHeight_1, minLines * lineHeight, maxLines * lineHeight);\n      } // Chrome's input caret height misaligns text so the line-height must be larger than font-size.\n      // The computed scrollHeight must also account for a larger inherited line-height from the parent.\n\n\n      scrollHeight_1 = Math.max(scrollHeight_1, getFontSize(this.valueElement) + 1, getLineHeight(parentElement_1)); // Need to add a small buffer so text does not shift prior to resizing, causing an infinite loop.\n      // IE needs a larger buffer than other browsers.\n\n      scrollWidth += Browser.isInternetExplorer() ? BUFFER_WIDTH_IE : BUFFER_WIDTH_DEFAULT;\n      this.setState({\n        inputHeight: scrollHeight_1,\n        inputWidth: Math.max(scrollWidth, minWidth)\n      }); // synchronizes the ::before pseudo-element's height while editing for Chrome 53\n\n      if (multiline && this.state.isEditing) {\n        this.setTimeout(function () {\n          return parentElement_1.style.height = scrollHeight_1 + \"px\";\n        });\n      }\n    }\n  };\n\n  EditableText.displayName = DISPLAYNAME_PREFIX + \".EditableText\";\n  EditableText.defaultProps = {\n    alwaysRenderInput: false,\n    confirmOnEnterKey: false,\n    defaultValue: \"\",\n    disabled: false,\n    maxLines: Infinity,\n    minLines: 1,\n    minWidth: 80,\n    multiline: false,\n    placeholder: \"Click to Edit\",\n    type: \"text\"\n  };\n  EditableText = __decorate([polyfill], EditableText);\n  return EditableText;\n}(AbstractPureComponent2);\n\nexport { EditableText };\n\nfunction getFontSize(element) {\n  var fontSize = getComputedStyle(element).fontSize;\n  return fontSize === \"\" ? 0 : parseInt(fontSize.slice(0, -2), 10);\n}\n\nfunction getLineHeight(element) {\n  // getComputedStyle() => 18.0001px => 18\n  var lineHeight = parseInt(getComputedStyle(element).lineHeight.slice(0, -2), 10); // this check will be true if line-height is a keyword like \"normal\"\n\n  if (isNaN(lineHeight)) {\n    // @see http://stackoverflow.com/a/18430767/6342931\n    var line = document.createElement(\"span\");\n    line.innerHTML = \"<br>\";\n    element.appendChild(line);\n    var singleLineHeight = element.offsetHeight;\n    line.innerHTML = \"<br><br>\";\n    var doubleLineHeight = element.offsetHeight;\n    element.removeChild(line); // this can return 0 in edge cases\n\n    lineHeight = doubleLineHeight - singleLineHeight;\n  }\n\n  return lineHeight;\n}\n\nfunction insertAtCaret(el, text) {\n  var selectionEnd = el.selectionEnd,\n      selectionStart = el.selectionStart,\n      value = el.value;\n\n  if (selectionStart >= 0) {\n    var before_1 = value.substring(0, selectionStart);\n    var after_1 = value.substring(selectionEnd, value.length);\n    var len = text.length;\n    el.value = \"\" + before_1 + text + after_1;\n    el.selectionStart = selectionStart + len;\n    el.selectionEnd = selectionStart + len;\n  }\n}\n\nfunction inputSupportsSelection(input) {\n  switch (input.type) {\n    // HTMLTextAreaElement\n    case \"textarea\":\n      return true;\n    // HTMLInputElement\n    // see https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n\n    case \"text\":\n    case \"search\":\n    case \"tel\":\n    case \"url\":\n    case \"password\":\n      return true;\n\n    default:\n      return false;\n  }\n}","map":{"version":3,"sources":["../../../../src/components/editable-text/editableText.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes, Keys } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\";\nimport { Browser } from \"../../compatibility\";\nvar BUFFER_WIDTH_DEFAULT = 5;\nvar BUFFER_WIDTH_IE = 30;\nvar EditableText = /** @class */ (function (_super) {\n    __extends(EditableText, _super);\n    function EditableText(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.inputElement = null;\n        _this.valueElement = null;\n        _this.refHandlers = {\n            content: function (spanElement) {\n                _this.valueElement = spanElement;\n            },\n            input: function (input) {\n                if (input != null) {\n                    _this.inputElement = input;\n                    // temporary fix for #3882\n                    if (!_this.props.alwaysRenderInput) {\n                        _this.inputElement.focus();\n                    }\n                    if (_this.state != null && _this.state.isEditing) {\n                        var supportsSelection = inputSupportsSelection(input);\n                        if (supportsSelection) {\n                            var length_1 = input.value.length;\n                            input.setSelectionRange(_this.props.selectAllOnFocus ? 0 : length_1, length_1);\n                        }\n                        if (!supportsSelection || !_this.props.selectAllOnFocus) {\n                            input.scrollLeft = input.scrollWidth;\n                        }\n                    }\n                }\n            },\n        };\n        _this.cancelEditing = function () {\n            var _a, _b, _c, _d;\n            var _e = _this.state, lastValue = _e.lastValue, value = _e.value;\n            _this.setState({ isEditing: false, value: lastValue });\n            if (value !== lastValue) {\n                (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, lastValue);\n            }\n            (_d = (_c = _this.props).onCancel) === null || _d === void 0 ? void 0 : _d.call(_c, lastValue);\n        };\n        _this.toggleEditing = function () {\n            var _a, _b;\n            if (_this.state.isEditing) {\n                var value = _this.state.value;\n                _this.setState({ isEditing: false, lastValue: value });\n                (_b = (_a = _this.props).onConfirm) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n            }\n            else if (!_this.props.disabled) {\n                _this.setState({ isEditing: true });\n            }\n        };\n        _this.handleFocus = function () {\n            var _a = _this.props, alwaysRenderInput = _a.alwaysRenderInput, disabled = _a.disabled, selectAllOnFocus = _a.selectAllOnFocus;\n            if (!disabled) {\n                _this.setState({ isEditing: true });\n            }\n            if (alwaysRenderInput && selectAllOnFocus && _this.inputElement != null) {\n                var length_2 = _this.inputElement.value.length;\n                _this.inputElement.setSelectionRange(0, length_2);\n            }\n        };\n        _this.handleTextChange = function (event) {\n            var _a, _b;\n            var value = event.target.value;\n            // state value should be updated only when uncontrolled\n            if (_this.props.value == null) {\n                _this.setState({ value: value });\n            }\n            (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n        };\n        _this.handleKeyEvent = function (event) {\n            // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n            /* eslint-disable-next-line deprecation/deprecation */\n            var altKey = event.altKey, ctrlKey = event.ctrlKey, metaKey = event.metaKey, shiftKey = event.shiftKey, which = event.which;\n            if (which === Keys.ESCAPE) {\n                _this.cancelEditing();\n                return;\n            }\n            var hasModifierKey = altKey || ctrlKey || metaKey || shiftKey;\n            if (which === Keys.ENTER) {\n                // prevent IE11 from full screening with alt + enter\n                // shift + enter adds a newline by default\n                if (altKey || shiftKey) {\n                    event.preventDefault();\n                }\n                if (_this.props.confirmOnEnterKey && _this.props.multiline) {\n                    if (event.target != null && hasModifierKey) {\n                        insertAtCaret(event.target, \"\\n\");\n                        _this.handleTextChange(event);\n                    }\n                    else {\n                        _this.toggleEditing();\n                    }\n                }\n                else if (!_this.props.multiline || hasModifierKey) {\n                    _this.toggleEditing();\n                }\n            }\n        };\n        var value = props.value == null ? props.defaultValue : props.value;\n        _this.state = {\n            inputHeight: 0,\n            inputWidth: 0,\n            isEditing: props.isEditing === true && props.disabled === false,\n            lastValue: value,\n            value: value,\n        };\n        return _this;\n    }\n    EditableText.prototype.render = function () {\n        var _a;\n        var _b;\n        var _c = this.props, alwaysRenderInput = _c.alwaysRenderInput, disabled = _c.disabled, multiline = _c.multiline;\n        var value = (_b = this.props.value) !== null && _b !== void 0 ? _b : this.state.value;\n        var hasValue = value != null && value !== \"\";\n        var classes = classNames(Classes.EDITABLE_TEXT, Classes.intentClass(this.props.intent), (_a = {},\n            _a[Classes.DISABLED] = disabled,\n            _a[Classes.EDITABLE_TEXT_EDITING] = this.state.isEditing,\n            _a[Classes.EDITABLE_TEXT_PLACEHOLDER] = !hasValue,\n            _a[Classes.MULTILINE] = multiline,\n            _a), this.props.className);\n        var contentStyle;\n        if (multiline) {\n            // set height only in multiline mode when not editing\n            // otherwise we're measuring this element to determine appropriate height of text\n            contentStyle = { height: !this.state.isEditing ? this.state.inputHeight : undefined };\n        }\n        else {\n            // minWidth only applies in single line mode (multiline == width 100%)\n            contentStyle = {\n                height: this.state.inputHeight,\n                lineHeight: this.state.inputHeight != null ? this.state.inputHeight + \"px\" : undefined,\n                minWidth: this.props.minWidth,\n            };\n        }\n        // If we are always rendering an input, then NEVER make the container div focusable.\n        // Otherwise, make container div focusable when not editing, so it can still be tabbed\n        // to focus (when the input is rendered, it is itself focusable so container div doesn't need to be)\n        var tabIndex = alwaysRenderInput || this.state.isEditing || disabled ? undefined : 0;\n        // we need the contents to be rendered while editing so that we can measure their height\n        // and size the container element responsively\n        var shouldHideContents = alwaysRenderInput && !this.state.isEditing;\n        return (React.createElement(\"div\", { className: classes, onFocus: this.handleFocus, tabIndex: tabIndex },\n            alwaysRenderInput || this.state.isEditing ? this.renderInput(value) : undefined,\n            shouldHideContents ? undefined : (React.createElement(\"span\", { className: Classes.EDITABLE_TEXT_CONTENT, ref: this.refHandlers.content, style: contentStyle }, hasValue ? value : this.props.placeholder))));\n    };\n    EditableText.prototype.componentDidMount = function () {\n        this.updateInputDimensions();\n    };\n    EditableText.prototype.componentDidUpdate = function (prevProps, prevState) {\n        var _a, _b;\n        var newState = {};\n        // allow setting the value to undefined/null in controlled mode\n        if (this.props.value !== prevProps.value && (prevProps.value != null || this.props.value != null)) {\n            newState.value = this.props.value;\n        }\n        if (this.props.isEditing != null && this.props.isEditing !== prevProps.isEditing) {\n            newState.isEditing = this.props.isEditing;\n        }\n        if (this.props.disabled || (this.props.disabled == null && prevProps.disabled)) {\n            newState.isEditing = false;\n        }\n        this.setState(newState);\n        if (this.state.isEditing && !prevState.isEditing) {\n            (_b = (_a = this.props).onEdit) === null || _b === void 0 ? void 0 : _b.call(_a, this.state.value);\n        }\n        this.updateInputDimensions();\n    };\n    EditableText.prototype.renderInput = function (value) {\n        var _a = this.props, disabled = _a.disabled, maxLength = _a.maxLength, multiline = _a.multiline, type = _a.type, placeholder = _a.placeholder;\n        var props = {\n            className: Classes.EDITABLE_TEXT_INPUT,\n            disabled: disabled,\n            maxLength: maxLength,\n            onBlur: this.toggleEditing,\n            onChange: this.handleTextChange,\n            onKeyDown: this.handleKeyEvent,\n            placeholder: placeholder,\n            value: value,\n        };\n        var _b = this.state, inputHeight = _b.inputHeight, inputWidth = _b.inputWidth;\n        if (inputHeight !== 0 && inputWidth !== 0) {\n            props.style = {\n                height: inputHeight,\n                lineHeight: !multiline && inputHeight != null ? inputHeight + \"px\" : undefined,\n                width: multiline ? \"100%\" : inputWidth,\n            };\n        }\n        return multiline ? (React.createElement(\"textarea\", __assign({ ref: this.refHandlers.input }, props))) : (React.createElement(\"input\", __assign({ ref: this.refHandlers.input, type: type }, props)));\n    };\n    EditableText.prototype.updateInputDimensions = function () {\n        if (this.valueElement != null) {\n            var _a = this.props, maxLines = _a.maxLines, minLines = _a.minLines, minWidth = _a.minWidth, multiline = _a.multiline;\n            var _b = this.valueElement, parentElement_1 = _b.parentElement, textContent = _b.textContent;\n            var _c = this.valueElement, scrollHeight_1 = _c.scrollHeight, scrollWidth = _c.scrollWidth;\n            var lineHeight = getLineHeight(this.valueElement);\n            // add one line to computed <span> height if text ends in newline\n            // because <span> collapses that trailing whitespace but <textarea> shows it\n            if (multiline && this.state.isEditing && /\\n$/.test(textContent !== null && textContent !== void 0 ? textContent : \"\")) {\n                scrollHeight_1 += lineHeight;\n            }\n            if (lineHeight > 0) {\n                // line height could be 0 if the isNaN block from getLineHeight kicks in\n                scrollHeight_1 = clamp(scrollHeight_1, minLines * lineHeight, maxLines * lineHeight);\n            }\n            // Chrome's input caret height misaligns text so the line-height must be larger than font-size.\n            // The computed scrollHeight must also account for a larger inherited line-height from the parent.\n            scrollHeight_1 = Math.max(scrollHeight_1, getFontSize(this.valueElement) + 1, getLineHeight(parentElement_1));\n            // Need to add a small buffer so text does not shift prior to resizing, causing an infinite loop.\n            // IE needs a larger buffer than other browsers.\n            scrollWidth += Browser.isInternetExplorer() ? BUFFER_WIDTH_IE : BUFFER_WIDTH_DEFAULT;\n            this.setState({\n                inputHeight: scrollHeight_1,\n                inputWidth: Math.max(scrollWidth, minWidth),\n            });\n            // synchronizes the ::before pseudo-element's height while editing for Chrome 53\n            if (multiline && this.state.isEditing) {\n                this.setTimeout(function () { return (parentElement_1.style.height = scrollHeight_1 + \"px\"); });\n            }\n        }\n    };\n    EditableText.displayName = DISPLAYNAME_PREFIX + \".EditableText\";\n    EditableText.defaultProps = {\n        alwaysRenderInput: false,\n        confirmOnEnterKey: false,\n        defaultValue: \"\",\n        disabled: false,\n        maxLines: Infinity,\n        minLines: 1,\n        minWidth: 80,\n        multiline: false,\n        placeholder: \"Click to Edit\",\n        type: \"text\",\n    };\n    EditableText = __decorate([\n        polyfill\n    ], EditableText);\n    return EditableText;\n}(AbstractPureComponent2));\nexport { EditableText };\nfunction getFontSize(element) {\n    var fontSize = getComputedStyle(element).fontSize;\n    return fontSize === \"\" ? 0 : parseInt(fontSize.slice(0, -2), 10);\n}\nfunction getLineHeight(element) {\n    // getComputedStyle() => 18.0001px => 18\n    var lineHeight = parseInt(getComputedStyle(element).lineHeight.slice(0, -2), 10);\n    // this check will be true if line-height is a keyword like \"normal\"\n    if (isNaN(lineHeight)) {\n        // @see http://stackoverflow.com/a/18430767/6342931\n        var line = document.createElement(\"span\");\n        line.innerHTML = \"<br>\";\n        element.appendChild(line);\n        var singleLineHeight = element.offsetHeight;\n        line.innerHTML = \"<br><br>\";\n        var doubleLineHeight = element.offsetHeight;\n        element.removeChild(line);\n        // this can return 0 in edge cases\n        lineHeight = doubleLineHeight - singleLineHeight;\n    }\n    return lineHeight;\n}\nfunction insertAtCaret(el, text) {\n    var selectionEnd = el.selectionEnd, selectionStart = el.selectionStart, value = el.value;\n    if (selectionStart >= 0) {\n        var before_1 = value.substring(0, selectionStart);\n        var after_1 = value.substring(selectionEnd, value.length);\n        var len = text.length;\n        el.value = \"\" + before_1 + text + after_1;\n        el.selectionStart = selectionStart + len;\n        el.selectionEnd = selectionStart + len;\n    }\n}\nfunction inputSupportsSelection(input) {\n    switch (input.type) {\n        // HTMLTextAreaElement\n        case \"textarea\":\n            return true;\n        // HTMLInputElement\n        // see https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n        case \"text\":\n        case \"search\":\n        case \"tel\":\n        case \"url\":\n        case \"password\":\n            return true;\n        default:\n            return false;\n    }\n}\n//# sourceMappingURL=editableText.js.map"]},"metadata":{},"sourceType":"module"}