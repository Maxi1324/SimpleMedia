{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { SPINNER_WARN_CLASSES_SIZE } from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\"; // see http://stackoverflow.com/a/18473154/3124288 for calculating arc path\n\nvar R = 45;\nvar SPINNER_TRACK = \"M 50,50 m 0,-\" + R + \" a \" + R + \",\" + R + \" 0 1 1 0,\" + R * 2 + \" a \" + R + \",\" + R + \" 0 1 1 0,-\" + R * 2; // unitless total length of SVG path, to which stroke-dash* properties are relative.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pathLength\n// this value is the result of `<path d={SPINNER_TRACK} />.getTotalLength()` and works in all browsers:\n\nvar PATH_LENGTH = 280;\nvar MIN_SIZE = 10;\nvar STROKE_WIDTH = 4;\nvar MIN_STROKE_WIDTH = 16;\n\nvar Spinner =\n/** @class */\nfunction (_super) {\n  __extends(Spinner, _super);\n\n  function Spinner() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Spinner_1 = Spinner;\n\n  Spinner.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.value !== this.props.value) {\n      // IE/Edge: re-render after changing value to force SVG update\n      this.forceUpdate();\n    }\n  };\n\n  Spinner.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        className = _b.className,\n        intent = _b.intent,\n        value = _b.value,\n        _c = _b.tagName,\n        tagName = _c === void 0 ? \"div\" : _c;\n    var size = this.getSize();\n    var classes = classNames(Classes.SPINNER, Classes.intentClass(intent), (_a = {}, _a[Classes.SPINNER_NO_SPIN] = value != null, _a), className); // keep spinner track width consistent at all sizes (down to about 10px).\n\n    var strokeWidth = Math.min(MIN_STROKE_WIDTH, STROKE_WIDTH * Spinner_1.SIZE_LARGE / size);\n    var strokeOffset = PATH_LENGTH - PATH_LENGTH * (value == null ? 0.25 : clamp(value, 0, 1)); // multiple DOM elements around SVG are necessary to properly isolate animation:\n    // - SVG elements in IE do not support anim/trans so they must be set on a parent HTML element.\n    // - SPINNER_ANIMATION isolates svg from parent display and is always centered inside root element.\n\n    return React.createElement(tagName, {\n      className: classes\n    }, React.createElement(tagName, {\n      className: Classes.SPINNER_ANIMATION\n    }, React.createElement(\"svg\", {\n      width: size,\n      height: size,\n      strokeWidth: strokeWidth.toFixed(2),\n      viewBox: this.getViewBox(strokeWidth)\n    }, React.createElement(\"path\", {\n      className: Classes.SPINNER_TRACK,\n      d: SPINNER_TRACK\n    }), React.createElement(\"path\", {\n      className: Classes.SPINNER_HEAD,\n      d: SPINNER_TRACK,\n      pathLength: PATH_LENGTH,\n      strokeDasharray: PATH_LENGTH + \" \" + PATH_LENGTH,\n      strokeDashoffset: strokeOffset\n    }))));\n  };\n\n  Spinner.prototype.validateProps = function (_a) {\n    var _b = _a.className,\n        className = _b === void 0 ? \"\" : _b,\n        size = _a.size;\n\n    if (size != null && (className.indexOf(Classes.SMALL) >= 0 || className.indexOf(Classes.LARGE) >= 0)) {\n      console.warn(SPINNER_WARN_CLASSES_SIZE);\n    }\n  };\n  /**\n   * Resolve size to a pixel value.\n   * Size can be set by className, props, default, or minimum constant.\n   */\n\n\n  Spinner.prototype.getSize = function () {\n    var _a = this.props,\n        _b = _a.className,\n        className = _b === void 0 ? \"\" : _b,\n        size = _a.size;\n\n    if (size == null) {\n      // allow Classes constants to determine default size.\n      if (className.indexOf(Classes.SMALL) >= 0) {\n        return Spinner_1.SIZE_SMALL;\n      } else if (className.indexOf(Classes.LARGE) >= 0) {\n        return Spinner_1.SIZE_LARGE;\n      }\n\n      return Spinner_1.SIZE_STANDARD;\n    }\n\n    return Math.max(MIN_SIZE, size);\n  };\n  /** Compute viewbox such that stroked track sits exactly at edge of image frame. */\n\n\n  Spinner.prototype.getViewBox = function (strokeWidth) {\n    var radius = R + strokeWidth / 2;\n    var viewBoxX = (50 - radius).toFixed(2);\n    var viewBoxWidth = (radius * 2).toFixed(2);\n    return viewBoxX + \" \" + viewBoxX + \" \" + viewBoxWidth + \" \" + viewBoxWidth;\n  };\n\n  var Spinner_1;\n  Spinner.displayName = DISPLAYNAME_PREFIX + \".Spinner\";\n  Spinner.SIZE_SMALL = 20;\n  Spinner.SIZE_STANDARD = 50;\n  Spinner.SIZE_LARGE = 100;\n  Spinner = Spinner_1 = __decorate([polyfill], Spinner);\n  return Spinner;\n}(AbstractPureComponent2);\n\nexport { Spinner };","map":{"version":3,"sources":["../../../../src/components/spinner/spinner.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { SPINNER_WARN_CLASSES_SIZE } from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\";\n// see http://stackoverflow.com/a/18473154/3124288 for calculating arc path\nvar R = 45;\nvar SPINNER_TRACK = \"M 50,50 m 0,-\" + R + \" a \" + R + \",\" + R + \" 0 1 1 0,\" + R * 2 + \" a \" + R + \",\" + R + \" 0 1 1 0,-\" + R * 2;\n// unitless total length of SVG path, to which stroke-dash* properties are relative.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pathLength\n// this value is the result of `<path d={SPINNER_TRACK} />.getTotalLength()` and works in all browsers:\nvar PATH_LENGTH = 280;\nvar MIN_SIZE = 10;\nvar STROKE_WIDTH = 4;\nvar MIN_STROKE_WIDTH = 16;\nvar Spinner = /** @class */ (function (_super) {\n    __extends(Spinner, _super);\n    function Spinner() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Spinner_1 = Spinner;\n    Spinner.prototype.componentDidUpdate = function (prevProps) {\n        if (prevProps.value !== this.props.value) {\n            // IE/Edge: re-render after changing value to force SVG update\n            this.forceUpdate();\n        }\n    };\n    Spinner.prototype.render = function () {\n        var _a;\n        var _b = this.props, className = _b.className, intent = _b.intent, value = _b.value, _c = _b.tagName, tagName = _c === void 0 ? \"div\" : _c;\n        var size = this.getSize();\n        var classes = classNames(Classes.SPINNER, Classes.intentClass(intent), (_a = {}, _a[Classes.SPINNER_NO_SPIN] = value != null, _a), className);\n        // keep spinner track width consistent at all sizes (down to about 10px).\n        var strokeWidth = Math.min(MIN_STROKE_WIDTH, (STROKE_WIDTH * Spinner_1.SIZE_LARGE) / size);\n        var strokeOffset = PATH_LENGTH - PATH_LENGTH * (value == null ? 0.25 : clamp(value, 0, 1));\n        // multiple DOM elements around SVG are necessary to properly isolate animation:\n        // - SVG elements in IE do not support anim/trans so they must be set on a parent HTML element.\n        // - SPINNER_ANIMATION isolates svg from parent display and is always centered inside root element.\n        return React.createElement(tagName, { className: classes }, React.createElement(tagName, { className: Classes.SPINNER_ANIMATION }, React.createElement(\"svg\", { width: size, height: size, strokeWidth: strokeWidth.toFixed(2), viewBox: this.getViewBox(strokeWidth) },\n            React.createElement(\"path\", { className: Classes.SPINNER_TRACK, d: SPINNER_TRACK }),\n            React.createElement(\"path\", { className: Classes.SPINNER_HEAD, d: SPINNER_TRACK, pathLength: PATH_LENGTH, strokeDasharray: PATH_LENGTH + \" \" + PATH_LENGTH, strokeDashoffset: strokeOffset }))));\n    };\n    Spinner.prototype.validateProps = function (_a) {\n        var _b = _a.className, className = _b === void 0 ? \"\" : _b, size = _a.size;\n        if (size != null && (className.indexOf(Classes.SMALL) >= 0 || className.indexOf(Classes.LARGE) >= 0)) {\n            console.warn(SPINNER_WARN_CLASSES_SIZE);\n        }\n    };\n    /**\n     * Resolve size to a pixel value.\n     * Size can be set by className, props, default, or minimum constant.\n     */\n    Spinner.prototype.getSize = function () {\n        var _a = this.props, _b = _a.className, className = _b === void 0 ? \"\" : _b, size = _a.size;\n        if (size == null) {\n            // allow Classes constants to determine default size.\n            if (className.indexOf(Classes.SMALL) >= 0) {\n                return Spinner_1.SIZE_SMALL;\n            }\n            else if (className.indexOf(Classes.LARGE) >= 0) {\n                return Spinner_1.SIZE_LARGE;\n            }\n            return Spinner_1.SIZE_STANDARD;\n        }\n        return Math.max(MIN_SIZE, size);\n    };\n    /** Compute viewbox such that stroked track sits exactly at edge of image frame. */\n    Spinner.prototype.getViewBox = function (strokeWidth) {\n        var radius = R + strokeWidth / 2;\n        var viewBoxX = (50 - radius).toFixed(2);\n        var viewBoxWidth = (radius * 2).toFixed(2);\n        return viewBoxX + \" \" + viewBoxX + \" \" + viewBoxWidth + \" \" + viewBoxWidth;\n    };\n    var Spinner_1;\n    Spinner.displayName = DISPLAYNAME_PREFIX + \".Spinner\";\n    Spinner.SIZE_SMALL = 20;\n    Spinner.SIZE_STANDARD = 50;\n    Spinner.SIZE_LARGE = 100;\n    Spinner = Spinner_1 = __decorate([\n        polyfill\n    ], Spinner);\n    return Spinner;\n}(AbstractPureComponent2));\nexport { Spinner };\n//# sourceMappingURL=spinner.js.map"]},"metadata":{},"sourceType":"module"}