{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Popper placement utils\n// ======================\n\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getPosition(placement) {\n  return placement.split(\"-\")[0];\n}\n/** Returns true if position is left or right. */\n\nexport function isVerticalPosition(side) {\n  return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n/** Returns the opposite position. */\n\nexport function getOppositePosition(side) {\n  switch (side) {\n    case \"top\":\n      return \"bottom\";\n\n    case \"left\":\n      return \"right\";\n\n    case \"bottom\":\n      return \"top\";\n\n    default:\n      return \"left\";\n  }\n}\n/** Returns the CSS alignment keyword corresponding to given placement. */\n\nexport function getAlignment(placement) {\n  var align = placement.split(\"-\")[1];\n\n  switch (align) {\n    case \"start\":\n      return \"left\";\n\n    case \"end\":\n      return \"right\";\n\n    default:\n      return \"center\";\n  }\n} // Popper modifiers\n// ================\n\n/** Modifier helper function to compute popper transform-origin based on arrow position */\n\nexport function getTransformOrigin(data) {\n  var position = getPosition(data.placement);\n\n  if (data.arrowElement == null) {\n    return isVerticalPosition(position) ? getOppositePosition(position) + \" \" + getAlignment(position) : getAlignment(position) + \" \" + getOppositePosition(position);\n  } else {\n    var arrowSizeShift = data.arrowElement.clientHeight / 2;\n    var arrow = data.offsets.arrow; // can use keyword for dimension without the arrow, to ease computation burden.\n    // move origin by half arrow's height to keep it centered.\n\n    return isVerticalPosition(position) ? getOppositePosition(position) + \" \" + (arrow.top + arrowSizeShift) + \"px\" : arrow.left + arrowSizeShift + \"px \" + getOppositePosition(position);\n  }\n} // additional space between arrow and edge of target\n\nvar ARROW_SPACING = 4;\n/** Popper modifier that offsets popper and arrow so arrow points out of the correct side */\n\nexport var arrowOffsetModifier = function (data) {\n  if (data.arrowElement == null) {\n    return data;\n  } // our arrows have equal width and height\n\n\n  var arrowSize = data.arrowElement.clientWidth; // this logic borrowed from original Popper arrow modifier itself\n\n  var position = getPosition(data.placement);\n  var isVertical = isVerticalPosition(position);\n  var len = isVertical ? \"width\" : \"height\";\n  var offsetSide = isVertical ? \"left\" : \"top\";\n  var arrowOffsetSize = Math.round(arrowSize / 2 / Math.sqrt(2)); // offset popover by arrow size, offset arrow in the opposite direction\n\n  if (position === \"top\" || position === \"left\") {\n    // the \"up & back\" directions require negative popper offsets\n    data.offsets.popper[offsetSide] -= arrowOffsetSize + ARROW_SPACING; // can only use left/top on arrow so gotta get clever with 100% + X\n\n    data.offsets.arrow[offsetSide] = data.offsets.popper[len] - arrowSize + arrowOffsetSize;\n  } else {\n    data.offsets.popper[offsetSide] += arrowOffsetSize + ARROW_SPACING;\n    data.offsets.arrow[offsetSide] = -arrowOffsetSize;\n  }\n\n  return data;\n};","map":{"version":3,"sources":["../../../../src/components/popover/popperUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Popper placement utils\n// ======================\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getPosition(placement) {\n    return placement.split(\"-\")[0];\n}\n/** Returns true if position is left or right. */\nexport function isVerticalPosition(side) {\n    return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n/** Returns the opposite position. */\nexport function getOppositePosition(side) {\n    switch (side) {\n        case \"top\":\n            return \"bottom\";\n        case \"left\":\n            return \"right\";\n        case \"bottom\":\n            return \"top\";\n        default:\n            return \"left\";\n    }\n}\n/** Returns the CSS alignment keyword corresponding to given placement. */\nexport function getAlignment(placement) {\n    var align = placement.split(\"-\")[1];\n    switch (align) {\n        case \"start\":\n            return \"left\";\n        case \"end\":\n            return \"right\";\n        default:\n            return \"center\";\n    }\n}\n// Popper modifiers\n// ================\n/** Modifier helper function to compute popper transform-origin based on arrow position */\nexport function getTransformOrigin(data) {\n    var position = getPosition(data.placement);\n    if (data.arrowElement == null) {\n        return isVerticalPosition(position)\n            ? getOppositePosition(position) + \" \" + getAlignment(position)\n            : getAlignment(position) + \" \" + getOppositePosition(position);\n    }\n    else {\n        var arrowSizeShift = data.arrowElement.clientHeight / 2;\n        var arrow = data.offsets.arrow;\n        // can use keyword for dimension without the arrow, to ease computation burden.\n        // move origin by half arrow's height to keep it centered.\n        return isVerticalPosition(position)\n            ? getOppositePosition(position) + \" \" + (arrow.top + arrowSizeShift) + \"px\"\n            : arrow.left + arrowSizeShift + \"px \" + getOppositePosition(position);\n    }\n}\n// additional space between arrow and edge of target\nvar ARROW_SPACING = 4;\n/** Popper modifier that offsets popper and arrow so arrow points out of the correct side */\nexport var arrowOffsetModifier = function (data) {\n    if (data.arrowElement == null) {\n        return data;\n    }\n    // our arrows have equal width and height\n    var arrowSize = data.arrowElement.clientWidth;\n    // this logic borrowed from original Popper arrow modifier itself\n    var position = getPosition(data.placement);\n    var isVertical = isVerticalPosition(position);\n    var len = isVertical ? \"width\" : \"height\";\n    var offsetSide = isVertical ? \"left\" : \"top\";\n    var arrowOffsetSize = Math.round(arrowSize / 2 / Math.sqrt(2));\n    // offset popover by arrow size, offset arrow in the opposite direction\n    if (position === \"top\" || position === \"left\") {\n        // the \"up & back\" directions require negative popper offsets\n        data.offsets.popper[offsetSide] -= arrowOffsetSize + ARROW_SPACING;\n        // can only use left/top on arrow so gotta get clever with 100% + X\n        data.offsets.arrow[offsetSide] = data.offsets.popper[len] - arrowSize + arrowOffsetSize;\n    }\n    else {\n        data.offsets.popper[offsetSide] += arrowOffsetSize + ARROW_SPACING;\n        data.offsets.arrow[offsetSide] = -arrowOffsetSize;\n    }\n    return data;\n};\n//# sourceMappingURL=popperUtils.js.map"]},"metadata":{},"sourceType":"module"}