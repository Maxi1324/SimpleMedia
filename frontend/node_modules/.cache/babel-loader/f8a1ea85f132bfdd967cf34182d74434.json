{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __decorate, __extends, __spreadArrays } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { PanelView } from \"./panelView\";\n/** @deprecated use `PanelStack2<T>` */\n\nvar PanelStack =\n/** @class */\nfunction (_super) {\n  __extends(PanelStack, _super);\n\n  function PanelStack() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      direction: \"push\",\n      stack: _this.props.stack != null ? _this.props.stack.slice().reverse() : _this.props.initialPanel !== undefined ? [_this.props.initialPanel] : []\n    };\n\n    _this.renderPanel = function (panel, index) {\n      var _a = _this.props,\n          renderActivePanelOnly = _a.renderActivePanelOnly,\n          _b = _a.showPanelHeader,\n          showPanelHeader = _b === void 0 ? true : _b;\n      var stack = _this.state.stack; // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n      // therefore they would not trigger the \"enter\" transition event as they were entered.\n      // To force the enter event, we want to change the key, but stack.length is not enough\n      // and a single panel should not rerender as long as it's hidden.\n      // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n      // second one, active changes only when the panel becomes or stops being active.\n\n      var layer = stack.length - index;\n      var key = renderActivePanelOnly ? stack.length : layer;\n      return React.createElement(CSSTransition, {\n        classNames: Classes.PANEL_STACK,\n        key: key,\n        timeout: 400\n      }, React.createElement(PanelView, {\n        onClose: _this.handlePanelClose,\n        onOpen: _this.handlePanelOpen,\n        panel: panel,\n        previousPanel: stack[index + 1],\n        showHeader: showPanelHeader\n      }));\n    };\n\n    _this.handlePanelClose = function (panel) {\n      var _a, _b;\n\n      var stack = _this.state.stack; // only remove this panel if it is at the top and not the only one.\n\n      if (stack[0] !== panel || stack.length <= 1) {\n        return;\n      }\n\n      (_b = (_a = _this.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"pop\",\n            stack: state.stack.slice(1)\n          };\n        });\n      }\n    };\n\n    _this.handlePanelOpen = function (panel) {\n      var _a, _b;\n\n      (_b = (_a = _this.props).onOpen) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"push\",\n            stack: __spreadArrays([panel], state.stack)\n          };\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  PanelStack.prototype.componentDidUpdate = function (prevProps, prevState) {\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState); // Always update local stack if stack prop changes\n\n\n    if (this.props.stack !== prevProps.stack && prevProps.stack != null) {\n      this.setState({\n        stack: this.props.stack.slice().reverse()\n      });\n    } // Only update animation direction if stack length changes\n\n\n    var stackLength = this.props.stack != null ? this.props.stack.length : 0;\n    var prevStackLength = prevProps.stack != null ? prevProps.stack.length : 0;\n\n    if (stackLength !== prevStackLength && prevProps.stack != null) {\n      this.setState({\n        direction: prevProps.stack.length - this.props.stack.length < 0 ? \"push\" : \"pop\"\n      });\n    }\n  };\n\n  PanelStack.prototype.render = function () {\n    var classes = classNames(Classes.PANEL_STACK, Classes.PANEL_STACK + \"-\" + this.state.direction, this.props.className);\n    return React.createElement(TransitionGroup, {\n      className: classes,\n      component: \"div\"\n    }, this.renderPanels());\n  };\n\n  PanelStack.prototype.validateProps = function (props) {\n    if (props.initialPanel == null && props.stack == null || props.initialPanel != null && props.stack != null) {\n      console.error(Errors.PANEL_STACK_INITIAL_PANEL_STACK_MUTEX);\n    }\n\n    if (props.stack != null && props.stack.length === 0) {\n      console.error(Errors.PANEL_STACK_REQUIRES_PANEL);\n    }\n  };\n\n  PanelStack.prototype.renderPanels = function () {\n    var _a = this.props.renderActivePanelOnly,\n        renderActivePanelOnly = _a === void 0 ? true : _a;\n    var stack = this.state.stack;\n\n    if (stack.length === 0) {\n      return null;\n    }\n\n    var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n    var panelViews = panelsToRender.map(this.renderPanel).reverse();\n    return panelViews;\n  };\n\n  PanelStack = __decorate([polyfill], PanelStack);\n  return PanelStack;\n}(AbstractPureComponent2);\n\nexport { PanelStack };","map":{"version":3,"sources":["../../../../src/components/panel-stack/panelStack.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __decorate, __extends, __spreadArrays } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { PanelView } from \"./panelView\";\n/** @deprecated use `PanelStack2<T>` */\nvar PanelStack = /** @class */ (function (_super) {\n    __extends(PanelStack, _super);\n    function PanelStack() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            direction: \"push\",\n            stack: _this.props.stack != null\n                ? _this.props.stack.slice().reverse()\n                : _this.props.initialPanel !== undefined\n                    ? [_this.props.initialPanel]\n                    : [],\n        };\n        _this.renderPanel = function (panel, index) {\n            var _a = _this.props, renderActivePanelOnly = _a.renderActivePanelOnly, _b = _a.showPanelHeader, showPanelHeader = _b === void 0 ? true : _b;\n            var stack = _this.state.stack;\n            // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n            // therefore they would not trigger the \"enter\" transition event as they were entered.\n            // To force the enter event, we want to change the key, but stack.length is not enough\n            // and a single panel should not rerender as long as it's hidden.\n            // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n            // second one, active changes only when the panel becomes or stops being active.\n            var layer = stack.length - index;\n            var key = renderActivePanelOnly ? stack.length : layer;\n            return (React.createElement(CSSTransition, { classNames: Classes.PANEL_STACK, key: key, timeout: 400 },\n                React.createElement(PanelView, { onClose: _this.handlePanelClose, onOpen: _this.handlePanelOpen, panel: panel, previousPanel: stack[index + 1], showHeader: showPanelHeader })));\n        };\n        _this.handlePanelClose = function (panel) {\n            var _a, _b;\n            var stack = _this.state.stack;\n            // only remove this panel if it is at the top and not the only one.\n            if (stack[0] !== panel || stack.length <= 1) {\n                return;\n            }\n            (_b = (_a = _this.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n            if (_this.props.stack == null) {\n                _this.setState(function (state) { return ({\n                    direction: \"pop\",\n                    stack: state.stack.slice(1),\n                }); });\n            }\n        };\n        _this.handlePanelOpen = function (panel) {\n            var _a, _b;\n            (_b = (_a = _this.props).onOpen) === null || _b === void 0 ? void 0 : _b.call(_a, panel);\n            if (_this.props.stack == null) {\n                _this.setState(function (state) { return ({\n                    direction: \"push\",\n                    stack: __spreadArrays([panel], state.stack),\n                }); });\n            }\n        };\n        return _this;\n    }\n    PanelStack.prototype.componentDidUpdate = function (prevProps, prevState) {\n        _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\n        // Always update local stack if stack prop changes\n        if (this.props.stack !== prevProps.stack && prevProps.stack != null) {\n            this.setState({ stack: this.props.stack.slice().reverse() });\n        }\n        // Only update animation direction if stack length changes\n        var stackLength = this.props.stack != null ? this.props.stack.length : 0;\n        var prevStackLength = prevProps.stack != null ? prevProps.stack.length : 0;\n        if (stackLength !== prevStackLength && prevProps.stack != null) {\n            this.setState({\n                direction: prevProps.stack.length - this.props.stack.length < 0 ? \"push\" : \"pop\",\n            });\n        }\n    };\n    PanelStack.prototype.render = function () {\n        var classes = classNames(Classes.PANEL_STACK, Classes.PANEL_STACK + \"-\" + this.state.direction, this.props.className);\n        return (React.createElement(TransitionGroup, { className: classes, component: \"div\" }, this.renderPanels()));\n    };\n    PanelStack.prototype.validateProps = function (props) {\n        if ((props.initialPanel == null && props.stack == null) ||\n            (props.initialPanel != null && props.stack != null)) {\n            console.error(Errors.PANEL_STACK_INITIAL_PANEL_STACK_MUTEX);\n        }\n        if (props.stack != null && props.stack.length === 0) {\n            console.error(Errors.PANEL_STACK_REQUIRES_PANEL);\n        }\n    };\n    PanelStack.prototype.renderPanels = function () {\n        var _a = this.props.renderActivePanelOnly, renderActivePanelOnly = _a === void 0 ? true : _a;\n        var stack = this.state.stack;\n        if (stack.length === 0) {\n            return null;\n        }\n        var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n        var panelViews = panelsToRender.map(this.renderPanel).reverse();\n        return panelViews;\n    };\n    PanelStack = __decorate([\n        polyfill\n    ], PanelStack);\n    return PanelStack;\n}(AbstractPureComponent2));\nexport { PanelStack };\n//# sourceMappingURL=panelStack.js.map"]},"metadata":{},"sourceType":"module"}