{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __spreadArrays } from \"tslib\";\nimport * as React from \"react\";\nimport { comboMatches, getKeyCombo, parseKeyCombo } from \"../../components/hotkeys/hotkeyParser\";\nimport { HotkeysContext } from \"../../context\";\n/**\n * React hook to register global and local hotkeys for a component.\n *\n * @param keys list of hotkeys to configure\n * @param options hook options\n */\n\nexport function useHotkeys(keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.showDialogKeyCombo,\n      showDialogKeyCombo = _a === void 0 ? \"?\" : _a;\n  var localKeys = React.useMemo(function () {\n    return keys.filter(function (k) {\n      return !k.global;\n    }).map(function (k) {\n      return {\n        combo: parseKeyCombo(k.combo),\n        config: k\n      };\n    });\n  }, [keys]);\n  var globalKeys = React.useMemo(function () {\n    return keys.filter(function (k) {\n      return k.global;\n    }).map(function (k) {\n      return {\n        combo: parseKeyCombo(k.combo),\n        config: k\n      };\n    });\n  }, [keys]); // register keys with global context\n\n  var _b = React.useContext(HotkeysContext),\n      dispatch = _b[1];\n\n  React.useEffect(function () {\n    var payload = __spreadArrays(globalKeys.map(function (k) {\n      return k.config;\n    }), localKeys.map(function (k) {\n      return k.config;\n    }));\n\n    dispatch({\n      type: \"ADD_HOTKEYS\",\n      payload: payload\n    });\n    return function () {\n      return dispatch({\n        type: \"REMOVE_HOTKEYS\",\n        payload: payload\n      });\n    };\n  }, [keys]);\n\n  var invokeNamedCallbackIfComboRecognized = function (global, combo, callbackName, e) {\n    var _a, _b;\n\n    var isTextInput = isTargetATextInput(e);\n\n    for (var _i = 0, _c = global ? globalKeys : localKeys; _i < _c.length; _i++) {\n      var key = _c[_i];\n      var shouldIgnore = isTextInput && !key.config.allowInInput || key.config.disabled;\n\n      if (!shouldIgnore && comboMatches(key.combo, combo)) {\n        if (key.config.preventDefault) {\n          e.preventDefault();\n        }\n\n        if (key.config.stopPropagation) {\n          // set a flag just for unit testing. not meant to be referenced in feature work.\n          e.isPropagationStopped = true;\n          e.stopPropagation();\n        }\n\n        (_b = (_a = key.config)[callbackName]) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n      }\n    }\n  };\n\n  var handleGlobalKeyDown = React.useCallback(function (e) {\n    // special case for global keydown: if '?' is pressed, open the hotkeys dialog\n    var combo = getKeyCombo(e);\n    var isTextInput = isTargetATextInput(e);\n\n    if (!isTextInput && comboMatches(parseKeyCombo(showDialogKeyCombo), combo)) {\n      dispatch({\n        type: \"OPEN_DIALOG\"\n      });\n    } else {\n      invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), \"onKeyDown\", e);\n    }\n  }, [globalKeys]);\n  var handleGlobalKeyUp = React.useCallback(function (e) {\n    return invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), \"onKeyUp\", e);\n  }, [globalKeys]);\n  var handleLocalKeyDown = React.useCallback(function (e) {\n    return invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), \"onKeyDown\", e.nativeEvent);\n  }, [localKeys]);\n  var handleLocalKeyUp = React.useCallback(function (e) {\n    return invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), \"onKeyUp\", e.nativeEvent);\n  }, [localKeys]);\n  React.useEffect(function () {\n    document.addEventListener(\"keydown\", handleGlobalKeyDown);\n    document.addEventListener(\"keyup\", handleGlobalKeyUp);\n    return function () {\n      document.removeEventListener(\"keydown\", handleGlobalKeyDown);\n      document.removeEventListener(\"keyup\", handleGlobalKeyUp);\n    };\n  }, [handleGlobalKeyDown, handleGlobalKeyUp]);\n  return {\n    handleKeyDown: handleLocalKeyDown,\n    handleKeyUp: handleLocalKeyUp\n  };\n}\n/**\n * @returns true if the event target is a text input which should take priority over hotkey bindings\n */\n\nfunction isTargetATextInput(e) {\n  var elem = e.target; // we check these cases for unit testing, but this should not happen\n  // during normal operation\n\n  if (elem == null || elem.closest == null) {\n    return false;\n  }\n\n  var editable = elem.closest(\"input, textarea, [contenteditable=true]\");\n\n  if (editable == null) {\n    return false;\n  } // don't let checkboxes, switches, and radio buttons prevent hotkey behavior\n\n\n  if (editable.tagName.toLowerCase() === \"input\") {\n    var inputType = editable.type;\n\n    if (inputType === \"checkbox\" || inputType === \"radio\") {\n      return false;\n    }\n  } // don't let read-only fields prevent hotkey behavior\n\n\n  if (editable.readOnly) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../../../../src/hooks/hotkeys/useHotkeys.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __spreadArrays } from \"tslib\";\nimport * as React from \"react\";\nimport { comboMatches, getKeyCombo, parseKeyCombo } from \"../../components/hotkeys/hotkeyParser\";\nimport { HotkeysContext } from \"../../context\";\n/**\n * React hook to register global and local hotkeys for a component.\n *\n * @param keys list of hotkeys to configure\n * @param options hook options\n */\nexport function useHotkeys(keys, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.showDialogKeyCombo, showDialogKeyCombo = _a === void 0 ? \"?\" : _a;\n    var localKeys = React.useMemo(function () {\n        return keys\n            .filter(function (k) { return !k.global; })\n            .map(function (k) { return ({\n            combo: parseKeyCombo(k.combo),\n            config: k,\n        }); });\n    }, [keys]);\n    var globalKeys = React.useMemo(function () {\n        return keys\n            .filter(function (k) { return k.global; })\n            .map(function (k) { return ({\n            combo: parseKeyCombo(k.combo),\n            config: k,\n        }); });\n    }, [keys]);\n    // register keys with global context\n    var _b = React.useContext(HotkeysContext), dispatch = _b[1];\n    React.useEffect(function () {\n        var payload = __spreadArrays(globalKeys.map(function (k) { return k.config; }), localKeys.map(function (k) { return k.config; }));\n        dispatch({ type: \"ADD_HOTKEYS\", payload: payload });\n        return function () { return dispatch({ type: \"REMOVE_HOTKEYS\", payload: payload }); };\n    }, [keys]);\n    var invokeNamedCallbackIfComboRecognized = function (global, combo, callbackName, e) {\n        var _a, _b;\n        var isTextInput = isTargetATextInput(e);\n        for (var _i = 0, _c = global ? globalKeys : localKeys; _i < _c.length; _i++) {\n            var key = _c[_i];\n            var shouldIgnore = (isTextInput && !key.config.allowInInput) || key.config.disabled;\n            if (!shouldIgnore && comboMatches(key.combo, combo)) {\n                if (key.config.preventDefault) {\n                    e.preventDefault();\n                }\n                if (key.config.stopPropagation) {\n                    // set a flag just for unit testing. not meant to be referenced in feature work.\n                    e.isPropagationStopped = true;\n                    e.stopPropagation();\n                }\n                (_b = (_a = key.config)[callbackName]) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n            }\n        }\n    };\n    var handleGlobalKeyDown = React.useCallback(function (e) {\n        // special case for global keydown: if '?' is pressed, open the hotkeys dialog\n        var combo = getKeyCombo(e);\n        var isTextInput = isTargetATextInput(e);\n        if (!isTextInput && comboMatches(parseKeyCombo(showDialogKeyCombo), combo)) {\n            dispatch({ type: \"OPEN_DIALOG\" });\n        }\n        else {\n            invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), \"onKeyDown\", e);\n        }\n    }, [globalKeys]);\n    var handleGlobalKeyUp = React.useCallback(function (e) { return invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), \"onKeyUp\", e); }, [globalKeys]);\n    var handleLocalKeyDown = React.useCallback(function (e) {\n        return invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), \"onKeyDown\", e.nativeEvent);\n    }, [localKeys]);\n    var handleLocalKeyUp = React.useCallback(function (e) {\n        return invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), \"onKeyUp\", e.nativeEvent);\n    }, [localKeys]);\n    React.useEffect(function () {\n        document.addEventListener(\"keydown\", handleGlobalKeyDown);\n        document.addEventListener(\"keyup\", handleGlobalKeyUp);\n        return function () {\n            document.removeEventListener(\"keydown\", handleGlobalKeyDown);\n            document.removeEventListener(\"keyup\", handleGlobalKeyUp);\n        };\n    }, [handleGlobalKeyDown, handleGlobalKeyUp]);\n    return { handleKeyDown: handleLocalKeyDown, handleKeyUp: handleLocalKeyUp };\n}\n/**\n * @returns true if the event target is a text input which should take priority over hotkey bindings\n */\nfunction isTargetATextInput(e) {\n    var elem = e.target;\n    // we check these cases for unit testing, but this should not happen\n    // during normal operation\n    if (elem == null || elem.closest == null) {\n        return false;\n    }\n    var editable = elem.closest(\"input, textarea, [contenteditable=true]\");\n    if (editable == null) {\n        return false;\n    }\n    // don't let checkboxes, switches, and radio buttons prevent hotkey behavior\n    if (editable.tagName.toLowerCase() === \"input\") {\n        var inputType = editable.type;\n        if (inputType === \"checkbox\" || inputType === \"radio\") {\n            return false;\n        }\n    }\n    // don't let read-only fields prevent hotkey behavior\n    if (editable.readOnly) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=useHotkeys.js.map"]},"metadata":{},"sourceType":"module"}