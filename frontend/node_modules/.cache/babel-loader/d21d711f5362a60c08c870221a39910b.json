{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n/**\n * `Collapse` can be in one of six states, enumerated here.\n * When changing the `isOpen` prop, the following happens to the states:\n * isOpen={true}  : CLOSED -> OPEN_START -> OPENING -> OPEN\n * isOpen={false} : OPEN -> CLOSING_START -> CLOSING -> CLOSED\n */\n\nexport var AnimationStates;\n\n(function (AnimationStates) {\n  /**\n   * The body is re-rendered, height is set to the measured body height and\n   * the body Y is set to 0.\n   */\n  AnimationStates[AnimationStates[\"OPEN_START\"] = 0] = \"OPEN_START\";\n  /**\n   * Animation begins, height is set to auto. This is all animated, and on\n   * complete, the state changes to OPEN.\n   */\n\n  AnimationStates[AnimationStates[\"OPENING\"] = 1] = \"OPENING\";\n  /**\n   * The collapse height is set to auto, and the body Y is set to 0 (so the\n   * element can be seen as normal).\n   */\n\n  AnimationStates[AnimationStates[\"OPEN\"] = 2] = \"OPEN\";\n  /**\n   * Height has been changed from auto to the measured height of the body to\n   * prepare for the closing animation in CLOSING.\n   */\n\n  AnimationStates[AnimationStates[\"CLOSING_START\"] = 3] = \"CLOSING_START\";\n  /**\n   * Height is set to 0 and the body Y is at -height. Both of these properties\n   * are transformed, and then after the animation is complete, the state\n   * changes to CLOSED.\n   */\n\n  AnimationStates[AnimationStates[\"CLOSING\"] = 4] = \"CLOSING\";\n  /**\n   * The contents of the collapse is not rendered, the collapse height is 0,\n   * and the body Y is at -height (so that the bottom of the body is at Y=0).\n   */\n\n  AnimationStates[AnimationStates[\"CLOSED\"] = 5] = \"CLOSED\";\n})(AnimationStates || (AnimationStates = {}));\n\nvar Collapse =\n/** @class */\nfunction (_super) {\n  __extends(Collapse, _super);\n\n  function Collapse() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      animationState: _this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n      height: undefined,\n      heightWhenOpen: undefined\n    }; // The element containing the contents of the collapse.\n\n    _this.contents = null;\n\n    _this.contentsRefHandler = function (el) {\n      _this.contents = el;\n\n      if (_this.contents != null) {\n        var height = _this.contents.clientHeight;\n\n        _this.setState({\n          animationState: _this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n          height: height === 0 ? undefined : height + \"px\",\n          heightWhenOpen: height === 0 ? undefined : height\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  Collapse.getDerivedStateFromProps = function (props, state) {\n    var isOpen = props.isOpen;\n    var animationState = state.animationState;\n\n    if (isOpen) {\n      switch (animationState) {\n        case AnimationStates.OPEN:\n          // no-op\n          break;\n\n        case AnimationStates.OPENING:\n          // allow Collapse#onDelayedStateChange() to handle the transition here\n          break;\n\n        default:\n          return {\n            animationState: AnimationStates.OPEN_START\n          };\n      }\n    } else {\n      switch (animationState) {\n        case AnimationStates.CLOSED:\n          // no-op\n          break;\n\n        case AnimationStates.CLOSING:\n          // allow Collapse#onDelayedStateChange() to handle the transition here\n          break;\n\n        default:\n          // need to set an explicit height so that transition can work\n          return {\n            animationState: AnimationStates.CLOSING_START,\n            height: state.heightWhenOpen + \"px\"\n          };\n      }\n    }\n\n    return null;\n  };\n\n  Collapse.prototype.render = function () {\n    var isContentVisible = this.state.animationState !== AnimationStates.CLOSED;\n    var shouldRenderChildren = isContentVisible || this.props.keepChildrenMounted;\n    var displayWithTransform = isContentVisible && this.state.animationState !== AnimationStates.CLOSING;\n    var isAutoHeight = this.state.height === \"auto\";\n    var containerStyle = {\n      height: isContentVisible ? this.state.height : undefined,\n      overflowY: isAutoHeight ? \"visible\" : undefined,\n      // transitions don't work with height: auto\n      transition: isAutoHeight ? \"none\" : undefined\n    }; // in order to give hints to child elements which rely on CSS fixed positioning, we need to apply a class\n    // to the element which creates a new containing block with a non-empty `transform` property\n    // see https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n    var contentsStyle = {\n      // only use heightWhenOpen while closing\n      transform: displayWithTransform ? \"translateY(0)\" : \"translateY(-\" + this.state.heightWhenOpen + \"px)\",\n      // transitions don't work with height: auto\n      transition: isAutoHeight ? \"none\" : undefined\n    };\n    return React.createElement(this.props.component, {\n      className: classNames(Classes.COLLAPSE, this.props.className),\n      style: containerStyle\n    }, React.createElement(\"div\", {\n      className: classNames(Classes.COLLAPSE_BODY, Classes.FIXED_POSITIONING_CONTAINING_BLOCK),\n      ref: this.contentsRefHandler,\n      style: contentsStyle,\n      \"aria-hidden\": !isContentVisible && this.props.keepChildrenMounted\n    }, shouldRenderChildren ? this.props.children : null));\n  };\n\n  Collapse.prototype.componentDidMount = function () {\n    this.forceUpdate(); // HACKHACK: this should probably be done in getSnapshotBeforeUpdate\n\n    /* eslint-disable react/no-did-mount-set-state */\n\n    if (this.props.isOpen) {\n      this.setState({\n        animationState: AnimationStates.OPEN,\n        height: \"auto\"\n      });\n    } else {\n      this.setState({\n        animationState: AnimationStates.CLOSED,\n        height: \"0px\"\n      });\n    }\n    /* eslint-disable react/no-did-mount-set-state */\n\n  };\n\n  Collapse.prototype.componentDidUpdate = function () {\n    var _this = this;\n\n    if (this.contents == null) {\n      return;\n    }\n\n    var transitionDuration = this.props.transitionDuration;\n    var animationState = this.state.animationState;\n\n    if (animationState === AnimationStates.OPEN_START) {\n      var clientHeight = this.contents.clientHeight;\n      this.setState({\n        animationState: AnimationStates.OPENING,\n        height: clientHeight + \"px\",\n        heightWhenOpen: clientHeight\n      });\n      this.setTimeout(function () {\n        return _this.onDelayedStateChange();\n      }, transitionDuration);\n    } else if (animationState === AnimationStates.CLOSING_START) {\n      var clientHeight_1 = this.contents.clientHeight;\n      this.setTimeout(function () {\n        return _this.setState({\n          animationState: AnimationStates.CLOSING,\n          height: \"0px\",\n          heightWhenOpen: clientHeight_1\n        });\n      });\n      this.setTimeout(function () {\n        return _this.onDelayedStateChange();\n      }, transitionDuration);\n    }\n  };\n\n  Collapse.prototype.onDelayedStateChange = function () {\n    switch (this.state.animationState) {\n      case AnimationStates.OPENING:\n        this.setState({\n          animationState: AnimationStates.OPEN,\n          height: \"auto\"\n        });\n        break;\n\n      case AnimationStates.CLOSING:\n        this.setState({\n          animationState: AnimationStates.CLOSED\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  Collapse.displayName = DISPLAYNAME_PREFIX + \".Collapse\";\n  Collapse.defaultProps = {\n    component: \"div\",\n    isOpen: false,\n    keepChildrenMounted: false,\n    transitionDuration: 200\n  };\n  Collapse = __decorate([polyfill], Collapse);\n  return Collapse;\n}(AbstractPureComponent2);\n\nexport { Collapse };","map":{"version":3,"sources":["../../../../src/components/collapse/collapse.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n/**\n * `Collapse` can be in one of six states, enumerated here.\n * When changing the `isOpen` prop, the following happens to the states:\n * isOpen={true}  : CLOSED -> OPEN_START -> OPENING -> OPEN\n * isOpen={false} : OPEN -> CLOSING_START -> CLOSING -> CLOSED\n */\nexport var AnimationStates;\n(function (AnimationStates) {\n    /**\n     * The body is re-rendered, height is set to the measured body height and\n     * the body Y is set to 0.\n     */\n    AnimationStates[AnimationStates[\"OPEN_START\"] = 0] = \"OPEN_START\";\n    /**\n     * Animation begins, height is set to auto. This is all animated, and on\n     * complete, the state changes to OPEN.\n     */\n    AnimationStates[AnimationStates[\"OPENING\"] = 1] = \"OPENING\";\n    /**\n     * The collapse height is set to auto, and the body Y is set to 0 (so the\n     * element can be seen as normal).\n     */\n    AnimationStates[AnimationStates[\"OPEN\"] = 2] = \"OPEN\";\n    /**\n     * Height has been changed from auto to the measured height of the body to\n     * prepare for the closing animation in CLOSING.\n     */\n    AnimationStates[AnimationStates[\"CLOSING_START\"] = 3] = \"CLOSING_START\";\n    /**\n     * Height is set to 0 and the body Y is at -height. Both of these properties\n     * are transformed, and then after the animation is complete, the state\n     * changes to CLOSED.\n     */\n    AnimationStates[AnimationStates[\"CLOSING\"] = 4] = \"CLOSING\";\n    /**\n     * The contents of the collapse is not rendered, the collapse height is 0,\n     * and the body Y is at -height (so that the bottom of the body is at Y=0).\n     */\n    AnimationStates[AnimationStates[\"CLOSED\"] = 5] = \"CLOSED\";\n})(AnimationStates || (AnimationStates = {}));\nvar Collapse = /** @class */ (function (_super) {\n    __extends(Collapse, _super);\n    function Collapse() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            animationState: _this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n            height: undefined,\n            heightWhenOpen: undefined,\n        };\n        // The element containing the contents of the collapse.\n        _this.contents = null;\n        _this.contentsRefHandler = function (el) {\n            _this.contents = el;\n            if (_this.contents != null) {\n                var height = _this.contents.clientHeight;\n                _this.setState({\n                    animationState: _this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n                    height: height === 0 ? undefined : height + \"px\",\n                    heightWhenOpen: height === 0 ? undefined : height,\n                });\n            }\n        };\n        return _this;\n    }\n    Collapse.getDerivedStateFromProps = function (props, state) {\n        var isOpen = props.isOpen;\n        var animationState = state.animationState;\n        if (isOpen) {\n            switch (animationState) {\n                case AnimationStates.OPEN:\n                    // no-op\n                    break;\n                case AnimationStates.OPENING:\n                    // allow Collapse#onDelayedStateChange() to handle the transition here\n                    break;\n                default:\n                    return { animationState: AnimationStates.OPEN_START };\n            }\n        }\n        else {\n            switch (animationState) {\n                case AnimationStates.CLOSED:\n                    // no-op\n                    break;\n                case AnimationStates.CLOSING:\n                    // allow Collapse#onDelayedStateChange() to handle the transition here\n                    break;\n                default:\n                    // need to set an explicit height so that transition can work\n                    return {\n                        animationState: AnimationStates.CLOSING_START,\n                        height: state.heightWhenOpen + \"px\",\n                    };\n            }\n        }\n        return null;\n    };\n    Collapse.prototype.render = function () {\n        var isContentVisible = this.state.animationState !== AnimationStates.CLOSED;\n        var shouldRenderChildren = isContentVisible || this.props.keepChildrenMounted;\n        var displayWithTransform = isContentVisible && this.state.animationState !== AnimationStates.CLOSING;\n        var isAutoHeight = this.state.height === \"auto\";\n        var containerStyle = {\n            height: isContentVisible ? this.state.height : undefined,\n            overflowY: isAutoHeight ? \"visible\" : undefined,\n            // transitions don't work with height: auto\n            transition: isAutoHeight ? \"none\" : undefined,\n        };\n        // in order to give hints to child elements which rely on CSS fixed positioning, we need to apply a class\n        // to the element which creates a new containing block with a non-empty `transform` property\n        // see https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n        var contentsStyle = {\n            // only use heightWhenOpen while closing\n            transform: displayWithTransform ? \"translateY(0)\" : \"translateY(-\" + this.state.heightWhenOpen + \"px)\",\n            // transitions don't work with height: auto\n            transition: isAutoHeight ? \"none\" : undefined,\n        };\n        return React.createElement(this.props.component, {\n            className: classNames(Classes.COLLAPSE, this.props.className),\n            style: containerStyle,\n        }, React.createElement(\"div\", { className: classNames(Classes.COLLAPSE_BODY, Classes.FIXED_POSITIONING_CONTAINING_BLOCK), ref: this.contentsRefHandler, style: contentsStyle, \"aria-hidden\": !isContentVisible && this.props.keepChildrenMounted }, shouldRenderChildren ? this.props.children : null));\n    };\n    Collapse.prototype.componentDidMount = function () {\n        this.forceUpdate();\n        // HACKHACK: this should probably be done in getSnapshotBeforeUpdate\n        /* eslint-disable react/no-did-mount-set-state */\n        if (this.props.isOpen) {\n            this.setState({ animationState: AnimationStates.OPEN, height: \"auto\" });\n        }\n        else {\n            this.setState({ animationState: AnimationStates.CLOSED, height: \"0px\" });\n        }\n        /* eslint-disable react/no-did-mount-set-state */\n    };\n    Collapse.prototype.componentDidUpdate = function () {\n        var _this = this;\n        if (this.contents == null) {\n            return;\n        }\n        var transitionDuration = this.props.transitionDuration;\n        var animationState = this.state.animationState;\n        if (animationState === AnimationStates.OPEN_START) {\n            var clientHeight = this.contents.clientHeight;\n            this.setState({\n                animationState: AnimationStates.OPENING,\n                height: clientHeight + \"px\",\n                heightWhenOpen: clientHeight,\n            });\n            this.setTimeout(function () { return _this.onDelayedStateChange(); }, transitionDuration);\n        }\n        else if (animationState === AnimationStates.CLOSING_START) {\n            var clientHeight_1 = this.contents.clientHeight;\n            this.setTimeout(function () {\n                return _this.setState({\n                    animationState: AnimationStates.CLOSING,\n                    height: \"0px\",\n                    heightWhenOpen: clientHeight_1,\n                });\n            });\n            this.setTimeout(function () { return _this.onDelayedStateChange(); }, transitionDuration);\n        }\n    };\n    Collapse.prototype.onDelayedStateChange = function () {\n        switch (this.state.animationState) {\n            case AnimationStates.OPENING:\n                this.setState({ animationState: AnimationStates.OPEN, height: \"auto\" });\n                break;\n            case AnimationStates.CLOSING:\n                this.setState({ animationState: AnimationStates.CLOSED });\n                break;\n            default:\n                break;\n        }\n    };\n    Collapse.displayName = DISPLAYNAME_PREFIX + \".Collapse\";\n    Collapse.defaultProps = {\n        component: \"div\",\n        isOpen: false,\n        keepChildrenMounted: false,\n        transitionDuration: 200,\n    };\n    Collapse = __decorate([\n        polyfill\n    ], Collapse);\n    return Collapse;\n}(AbstractPureComponent2));\nexport { Collapse };\n//# sourceMappingURL=collapse.js.map"]},"metadata":{},"sourceType":"module"}